<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Util</name>
    </assembly>
    <members>
        <member name="T:Util.Applications.ApplicationServiceBase`4">
            <summary>
            应用服务
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.#ctor(Util.Datas.IUnitOfWork,Util.Domains.Repositories.IRepository{`0,`3})">
            <summary>
            初始化应用服务
            </summary>
            <param name="unitOfWork">工作单元</param>
            <param name="repository">仓储</param>
        </member>
        <member name="P:Util.Applications.ApplicationServiceBase`4.UnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="F:Util.Applications.ApplicationServiceBase`4._repository">
            <summary>
            仓储
            </summary>
        </member>
        <member name="P:Util.Applications.ApplicationServiceBase`4.EntityDescription">
            <summary>
            实体描述
            </summary>
        </member>
        <member name="F:Util.Applications.ApplicationServiceBase`4._businessId">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="P:Util.Applications.ApplicationServiceBase`4.LogContent">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Util.Applications.ApplicationServiceBase`4.Logger">
            <summary>
            日志组件
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.ToDto(`0)">
            <summary>
            转换为数据传输对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.ToEntity(`1)">
            <summary>
            转换为实体
            </summary>
            <param name="dto">数据传输对象</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.AddLog(`0)">
            <summary>
            添加日志
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.AddBusinessId(System.String)">
            <summary>
            添加业务编号
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.AddLog(System.Collections.Generic.IList{`0})">
            <summary>
            添加日志
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.WriteLog(System.String)">
            <summary>
            写日志
            </summary>
            <param name="caption">标题</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.WriteLog(System.String,`0)">
            <summary>
            写日志
            </summary>
            <param name="caption">标题</param>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.WriteLog(System.String,System.Collections.Generic.IList{`0})">
            <summary>
            写日志
            </summary>
            <param name="caption">标题</param>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.GetAll">
            <summary>
            获取全部
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.GetById(System.Object)">
            <summary>
            通过编号获取
            </summary>
            <param name="id">实体编号</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.GetByIds(System.String)">
            <summary>
            通过编号列表获取
            </summary>
            <param name="ids">用逗号分隔的Id列表，范例："83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.Query(`2)">
            <summary>
            查询
            </summary>
            <param name="queryEntity">查询实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.CreateQuery(`2)">
            <summary>
            创建查询对象
            </summary>
            <param name="queryEntity">查询实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.Query(Util.Datas.Queries.IQueryBase{`0})">
            <summary>
            查询
            </summary>
        </member>
        <member name="P:Util.Applications.ApplicationServiceBase`4.IsTracking">
            <summary>
            查询时是否跟踪对象
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.FilterQueryable(System.Linq.IQueryable{`0})">
            <summary>
            过滤查询
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.PagerQuery(`2)">
            <summary>
            分页查询
            </summary>
            <param name="queryEntity">查询实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.Create">
            <summary>
            创建实体
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.Save(`1)">
            <summary>
            保存
            </summary>
            <param name="dto">数据传输对象</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.SaveBefore(`1)">
            <summary>
            保存前操作
            </summary>
            <param name="dto">数据传输对象</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.IsNew(`1,`0)">
            <summary>
            是否新增
            </summary>
            <param name="dto">数据传输对象</param>
            <param name="entity">领域实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.Add(`0)">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.AddBefore(`0)">
            <summary>
            添加前操作
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.ThrowRepeatException(System.String,System.String)">
            <summary>
            抛出名称重复异常
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.AddAfter(`0)">
            <summary>
            添加后操作
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.Update(`0)">
            <summary>
            修改
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.UpdateBefore(`0,`0)">
            <summary>
            修改前操作
            </summary>
            <param name="newEntity">新实体</param>
            <param name="oldEntity">数据库中的旧实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.Update(`0,`0)">
            <summary>
            修改操作
            </summary>
            <param name="newEntity">新实体</param>
            <param name="oldEntity">数据库中的旧实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.UpdateAfter(`0,`0)">
            <summary>
            修改后操作
            </summary>
            <param name="newEntity">新实体</param>
            <param name="oldEntity">数据库中的旧实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.WriteUpdateLog(`0,Util.Domains.ChangeValueCollection)">
            <summary>
            写更新日志
            </summary>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.SaveAfter(`1,`0)">
            <summary>
            保存后操作
            </summary>
            <param name="dto">数据传输对象</param>
            <param name="entity">领域实体</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="ids">用逗号分隔的Id列表，范例："83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.DeleteBefore(System.Collections.Generic.List{`0})">
            <summary>
            删除前操作
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`4.DeleteAfter(System.Collections.Generic.List{`0})">
            <summary>
            删除后操作
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:Util.Applications.ApplicationServiceBase`3">
            <summary>
            应用服务
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
        </member>
        <member name="M:Util.Applications.ApplicationServiceBase`3.#ctor(Util.Datas.IUnitOfWork,Util.Domains.Repositories.IRepository{`0})">
            <summary>
            初始化应用服务
            </summary>
            <param name="unitOfWork">工作单元</param>
            <param name="repository">仓储</param>
        </member>
        <member name="T:Util.Applications.BatchServiceBase`4">
            <summary>
            批量操作服务
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.#ctor(Util.Datas.IUnitOfWork,Util.Domains.Repositories.IRepository{`0,`3})">
            <summary>
            初始化批操作服务
            </summary>
            <param name="unitOfWork">工作单元</param>
            <param name="repository">仓储</param>
        </member>
        <member name="F:Util.Applications.BatchServiceBase`4._repository">
            <summary>
            仓储
            </summary>
        </member>
        <member name="F:Util.Applications.BatchServiceBase`4._addList">
            <summary>
            新增列表
            </summary>
        </member>
        <member name="F:Util.Applications.BatchServiceBase`4._updateList">
            <summary>
            修改列表
            </summary>
        </member>
        <member name="F:Util.Applications.BatchServiceBase`4._deleteList">
            <summary>
            删除列表
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.Save(System.Collections.Generic.List{`1},System.Collections.Generic.List{`1},System.Collections.Generic.List{`1})">
            <summary>
            保存
            </summary>
            <param name="addList">新增列表</param>
            <param name="updateList">修改列表</param>
            <param name="deleteList">删除列表</param>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.SaveBefore(System.Collections.Generic.List{`1},System.Collections.Generic.List{`1},System.Collections.Generic.List{`1})">
            <summary>
            保存前操作
            </summary>
            <param name="addList">新增列表</param>
            <param name="updateList">修改列表</param>
            <param name="deleteList">删除列表</param>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.FilterList(System.Collections.Generic.List{`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            过滤无效数据
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.ValidateExists(System.Collections.Generic.List{`0})">
            <summary>
            验证重复
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.ValidateNameExists(System.Collections.Generic.List{`0})">
            <summary>
            验证名称重复
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.ValidateCodeExists(System.Collections.Generic.List{`0})">
            <summary>
            验证编码重复
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.AddList">
            <summary>
            添加列表
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.UpdateList">
            <summary>
            更新列表
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.DeleteList">
            <summary>
            删除列表
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.DeleteEntities(`0)">
            <summary>
            删除实体集合
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.DeleteEntity(`0)">
            <summary>
            删除实体
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.SaveAfter">
            <summary>
            保存后操作
            </summary>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`4.GetResult">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="T:Util.Applications.BatchServiceBase`3">
            <summary>
            批量操作服务
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
        </member>
        <member name="M:Util.Applications.BatchServiceBase`3.#ctor(Util.Datas.IUnitOfWork,Util.Domains.Repositories.IRepository{`0})">
            <summary>
            初始化批量操作服务
            </summary>
            <param name="unitOfWork">工作单元</param>
            <param name="repository">仓储</param>
        </member>
        <member name="T:Util.Applications.DtoBase">
            <summary>
            数据传输对象
            </summary>
        </member>
        <member name="P:Util.Applications.DtoBase.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:Util.Applications.DtoBase.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Util.Applications.IApplicationService`2">
            <summary>
            应用服务
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
        </member>
        <member name="M:Util.Applications.IApplicationService`2.GetAll">
            <summary>
            获取全部
            </summary>
        </member>
        <member name="M:Util.Applications.IApplicationService`2.GetById(System.Object)">
            <summary>
            通过编号获取
            </summary>
            <param name="id">实体编号</param>
        </member>
        <member name="M:Util.Applications.IApplicationService`2.GetByIds(System.String)">
            <summary>
            通过编号列表获取
            </summary>
            <param name="ids">用逗号分隔的Id列表，范例："83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Util.Applications.IApplicationService`2.Query(`1)">
            <summary>
            查询
            </summary>
            <param name="query">查询实体</param>
        </member>
        <member name="M:Util.Applications.IApplicationService`2.PagerQuery(`1)">
            <summary>
            分页查询
            </summary>
            <param name="query">查询实体</param>
        </member>
        <member name="M:Util.Applications.IApplicationService`2.Create">
            <summary>
            创建实体
            </summary>
        </member>
        <member name="M:Util.Applications.IApplicationService`2.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="ids">用逗号分隔的Id列表，范例："83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Util.Applications.IApplicationService`2.Save(`0)">
            <summary>
            保存
            </summary>
            <param name="dto">数据传输对象</param>
        </member>
        <member name="T:Util.Applications.IBatchService`2">
            <summary>
            批量操作服务
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
        </member>
        <member name="M:Util.Applications.IBatchService`2.Save(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            保存
            </summary>
            <param name="addList">新增列表</param>
            <param name="updateList">修改列表</param>
            <param name="deleteList">删除列表</param>
        </member>
        <member name="T:Util.Applications.IDto">
            <summary>
            数据传输对象
            </summary>
        </member>
        <member name="P:Util.Applications.IDto.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:Util.Applications.IDto.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Util.Applications.ITreeService`2">
            <summary>
            树型实体批量操作服务
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
        </member>
        <member name="M:Util.Applications.ITreeService`2.Create(System.String)">
            <summary>
            创建实体
            </summary>
            <param name="parentId">父Id</param>
        </member>
        <member name="M:Util.Applications.ITreeService`2.GetParentIdsFromPath(`0)">
            <summary>
            从路径中获取所有上级节点编号
            </summary>
            <param name="dto">数据传输对象</param>
        </member>
        <member name="M:Util.Applications.ITreeService`2.Enable(System.String)">
            <summary>
            启用
            </summary>
            <param name="ids">编号列表</param>
        </member>
        <member name="M:Util.Applications.ITreeService`2.Disable(System.String)">
            <summary>
            冻结
            </summary>
            <param name="ids">编号列表</param>
        </member>
        <member name="M:Util.Applications.ITreeService`2.FixPath">
            <summary>
            修正路径
            </summary>
        </member>
        <member name="T:Util.Applications.StateCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="F:Util.Applications.StateCode.Ok">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Util.Applications.StateCode.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Util.Applications.StateCode.Unauthenticate">
            <summary>
            未授权
            </summary>
        </member>
        <member name="T:Util.Applications.TreeServiceBase`5">
            <summary>
            树型实体批量操作服务
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父编号类型</typeparam>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.#ctor(Util.Datas.IUnitOfWork,Util.Domains.Repositories.IRepository{`0,`3})">
            <summary>
            初始化树型实体批量操作服务
            </summary>
            <param name="unitOfWork">工作单元</param>
            <param name="repository">仓储</param>
        </member>
        <member name="F:Util.Applications.TreeServiceBase`5._repository">
            <summary>
            仓储
            </summary>
        </member>
        <member name="F:Util.Applications.TreeServiceBase`5._pathChangeList">
            <summary>
            需要更新路径的实体列表
            </summary>
        </member>
        <member name="F:Util.Applications.TreeServiceBase`5._updatedPathIds">
            <summary>
            已更新路径Id列表
            </summary>
        </member>
        <member name="F:Util.Applications.TreeServiceBase`5._pathBefore">
            <summary>
            更新前路径
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetParentIdsFromPath(`1)">
            <summary>
            从路径中获取所有上级节点编号
            </summary>
            <param name="dto">数据传输对象</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetAllChilds(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetChilds(`0)">
            <summary>
            获取直接下级
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetRoots">
            <summary>
            获取根节点
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.Create(System.String)">
            <summary>
            创建实体
            </summary>
            <param name="parentId">父Id</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetSortId(`4)">
            <summary>
            获取排序号
            </summary>
            <param name="parentId">父Id</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.SaveBefore(System.Collections.Generic.List{`1},System.Collections.Generic.List{`1},System.Collections.Generic.List{`1})">
            <summary>
            保存前操作
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetParentChanges">
            <summary>
            获取父节点被修改的集合
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.FilterByPath(System.Collections.Generic.List{`0})">
            <summary>
            根据路径过滤，仅保留最顶级节点
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetPathChangeList(System.Collections.Generic.List{`0})">
            <summary>
            初始化需要更新路径的实体列表
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.AddPathChangeList(System.Collections.Generic.List{`0})">
            <summary>
            添加需要更新路径的实体列表
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.InitPath">
            <summary>
            初始化路径
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.InitPath(`0)">
            <summary>
            初始化路径
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.InitEntityPath(`0)">
            <summary>
            初始化实体路径
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetParent(`0)">
            <summary>
            获取父节点
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.DeleteEntities(`0)">
            <summary>
            删除实体集合
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetResult">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.GetIds">
            <summary>
            获取标识集合
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.Enable(System.String)">
            <summary>
            启用
            </summary>
            <param name="ids">编号列表</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.Enable(System.String,System.Boolean)">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.EnableNodeAndChilds(System.Collections.Generic.List{`0},`0,System.Boolean)">
            <summary>
            启用节点及全部下级节点
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.EnableNode(System.Collections.Generic.List{`0},`0,System.Boolean)">
            <summary>
            启用节点
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.WriteLog(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            写日志
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.Disable(System.String)">
            <summary>
            冻结
            </summary>
            <param name="ids">编号列表</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.FixPath">
            <summary>
            修正路径
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.FixPath(`0,`0)">
            <summary>
            修正路径
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.WriteFixPathLog(`0)">
            <summary>
            记录修正路径日志
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`5.FixChildPath(`0)">
            <summary>
            修复下级子节点
            </summary>
        </member>
        <member name="T:Util.Applications.TreeServiceBase`3">
            <summary>
            树型实体批量操作服务
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQuery">查询实体类型</typeparam>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`3.#ctor(Util.Datas.IUnitOfWork,Util.Domains.Repositories.IRepository{`0,System.Guid})">
            <summary>
            初始化树型实体批量操作服务
            </summary>
            <param name="unitOfWork">工作单元</param>
            <param name="repository">仓储</param>
        </member>
        <member name="F:Util.Applications.TreeServiceBase`3._repository">
            <summary>
            仓储
            </summary>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`3.GetSortId(System.Nullable{System.Guid})">
            <summary>
            获取排序号
            </summary>
            <param name="parentId">父Id</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`3.GetChilds(`0)">
            <summary>
            获取直接下级
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="M:Util.Applications.TreeServiceBase`3.GetRoots">
            <summary>
            获取根节点
            </summary>
        </member>
        <member name="T:Util.Contexts.IContext">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Util.Contexts.IContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Util.Contexts.IContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Contexts.IContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Util.Contexts.WebContext">
            <summary>
            Web上下文
            </summary>
        </member>
        <member name="M:Util.Contexts.WebContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Util.Contexts.WebContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Contexts.WebContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Util.Contexts.WindowsContext">
            <summary>
            Windows上下文
            </summary>
        </member>
        <member name="M:Util.Contexts.WindowsContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Util.Contexts.WindowsContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Contexts.WindowsContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Util.Datas.Extensions">
            <summary>
            系统扩展 - 查询扩展
            </summary>
        </member>
        <member name="M:Util.Datas.Extensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            选择性添加查询条件
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true则添加条件，否则忽略</param>
        </member>
        <member name="M:Util.Datas.Extensions.Filter``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            添加查询条件,如果参数值为空，则忽略该条件，注意：一次仅能添加一个条件
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:Util.Datas.Extensions.Filter``1(System.Linq.IQueryable{``0},Util.Domains.Repositories.ICriteria{``0})">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="criteria">规约对象,由于规约对象可能返回多个条件组合，所以由规约对象本身进行空值判断</param>
        </member>
        <member name="M:Util.Datas.Extensions.FilterInt``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            添加整数范围过滤条件
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="source">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Extensions.FilterDouble``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            添加double范围过滤条件
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="source">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Extensions.FilterDecimal``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            添加decimal范围过滤条件
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="source">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Extensions.FilterDate``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            添加日期范围过滤条件 - 不包含时间
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="source">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Extensions.FilterDateTime``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            添加日期范围过滤条件 - 包含时间
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="source">数据源</param>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Extensions.Pager``1(System.Linq.IQueryable{``0},Util.Domains.Repositories.IPager)">
            <summary>
            分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:Util.Datas.Extensions.ToPageList``1(System.Linq.IQueryable{``0},Util.Domains.Repositories.IPager)">
            <summary>
            转换为分页列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="T:Util.Datas.IUnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:Util.Datas.IUnitOfWork.Commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.AndCriteria`1">
            <summary>
            与查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.AndCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化查询条件
            </summary>
            <param name="first">查询条件1</param>
            <param name="second">查询条件2</param>
        </member>
        <member name="P:Util.Datas.Queries.Criterias.AndCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.AndCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.DateSegmentCriteria`2">
            <summary>
            日期范围过滤条件 - 不包含时间
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DateSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            初始化日期范围过滤条件 - 不包含时间
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DateSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DateSegmentCriteria`2.GetMinValue">
            <summary>
            获取最小值
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DateSegmentCriteria`2.GetMaxValue">
            <summary>
            获取最大值
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DateSegmentCriteria`2.GetMaxOperator">
            <summary>
            获取最大值相关的运算符
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.DateTimeSegmentCriteria`2">
            <summary>
            日期范围过滤条件 - 包含时间
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            初始化日期范围过滤条件 - 包含时间
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.DecimalSegmentCriteria`2">
            <summary>
            decimal范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DecimalSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            初始化decimal范围过滤条件
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DecimalSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.DefaultCriteria`1">
            <summary>
            默认查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DefaultCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化查询条件
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="P:Util.Datas.Queries.Criterias.DefaultCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DefaultCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.DoubleSegmentCriteria`2">
            <summary>
            double范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DoubleSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            初始化double范围过滤条件
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.DoubleSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.IntSegmentCriteria`2">
            <summary>
            整数范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.IntSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            初始化整数范围过滤条件
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.IntSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.OrCriteria`1">
            <summary>
            或查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.OrCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化查询条件
            </summary>
            <param name="first">查询条件1</param>
            <param name="second">查询条件2</param>
        </member>
        <member name="P:Util.Datas.Queries.Criterias.OrCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.OrCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3">
            <summary>
            范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{`2},System.Nullable{`2})">
            <summary>
            初始化范围过滤条件
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="P:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.IsMinGreaterMax(System.Nullable{`2},System.Nullable{`2})">
            <summary>
            最小值是否大于最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="P:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.PropertyExpression">
            <summary>
            属性表达式
            </summary>
        </member>
        <member name="P:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.Builder">
            <summary>
            表达式生成器
            </summary>
        </member>
        <member name="P:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateLeftExpression">
            <summary>
            创建左操作数，即 t => t.Property >= Min
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMinValue">
            <summary>
            获取最小值
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateRightExpression">
            <summary>
            创建右操作数，即 t => t.Property &lt;= Max
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMaxOperator">
            <summary>
            获取最大值相关的运算符
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMaxValue">
            <summary>
            获取最大值
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.IQuery`2">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            添加排序
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="expression">属性表达式</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.OrderBy(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="propertyName">排序属性</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.WhereIf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            选择性添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true则添加条件，否则忽略</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.Filter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件,如果参数值为空，则忽略该条件，注意：一次仅能添加一个条件
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.Filter(System.String,System.Object,Util.Expressions.Operator)">
            <summary>
            添加查询条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.Filter(Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            添加查询条件
            </summary>
            <param name="criteria">规约对象,由于规约对象可能返回多个条件组合，所以由规约对象本身进行空值判断</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.FilterInt``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            添加整数范围过滤条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.FilterDouble``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            添加double范围过滤条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.FilterDecimal``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            添加decimal范围过滤条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.FilterDate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            添加日期范围过滤条件 - 不包含时间
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.FilterDateTime``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            添加日期范围过滤条件 - 包含时间
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.And(Util.Datas.Queries.IQuery{`0,`1})">
            <summary>
            与连接
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            与连接
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.Or(Util.Datas.Queries.IQuery{`0,`1})">
            <summary>
            或连接
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Queries.IQuery`2.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            或连接
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Util.Datas.Queries.IQuery`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Util.Datas.Queries.IQueryBase`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.IQueryBase`1.GetOrderBy">
            <summary>
            获取排序
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.IQueryBase`1.GetPager">
            <summary>
            获取分页
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.OrderByBuilder">
            <summary>
            排序生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.OrderByBuilder.#ctor">
            <summary>
            初始化排序生成器
            </summary>
        </member>
        <member name="P:Util.Datas.Queries.OrderByBuilder.Items">
            <summary>
            排序项
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.OrderByBuilder.Generate">
            <summary>
            生成排序字符串
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.OrderByBuilder.Add(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="name">排序属性</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:Util.Datas.Queries.OrderByBuilder.Add(System.String,Util.Datas.Queries.OrderDirection)">
            <summary>
            添加排序
            </summary>
            <param name="name">排序属性</param>
            <param name="direction">排序方向</param>
        </member>
        <member name="T:Util.Datas.Queries.OrderByItem">
            <summary>
            排序项
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.OrderByItem.#ctor(System.String,Util.Datas.Queries.OrderDirection)">
            <summary>
            初始化排序项
            </summary>
            <param name="name">排序属性</param>
            <param name="direction">排序方向</param>
        </member>
        <member name="P:Util.Datas.Queries.OrderByItem.Name">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:Util.Datas.Queries.OrderByItem.Direction">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.OrderByItem.Generate">
            <summary>
            创建排序字符串
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.OrderDirection">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="F:Util.Datas.Queries.OrderDirection.Asc">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Util.Datas.Queries.OrderDirection.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.OrderDirectioneExtensions">
            <summary>
            排序方向枚举扩展
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.OrderDirectioneExtensions.Description(System.Nullable{Util.Datas.Queries.OrderDirection})">
            <summary>
            获取描述
            </summary>
        </member>
        <member name="T:Util.Datas.Queries.Query`2">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.#ctor">
            <summary>
            初始化查询对象
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.#ctor(Util.Domains.Repositories.IQueryEntity)">
            <summary>
            初始化查询对象
            </summary>
            <param name="queryEntity">查询实体</param>
        </member>
        <member name="F:Util.Datas.Queries.Query`2._queryEntity">
            <summary>
            查询实体
            </summary>
        </member>
        <member name="F:Util.Datas.Queries.Query`2._predicateExpression">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:Util.Datas.Queries.Query`2.OrderBuilder">
            <summary>
            排序生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.GetOrderBy">
            <summary>
            获取排序
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.GetPager">
            <summary>
            获取分页
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            添加排序
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="expression">属性表达式</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.OrderBy(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="propertyName">排序属性</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.WhereIf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            选择性添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true则添加条件，否则忽略</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.Filter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件,如果参数值为空，则忽略该条件，注意：一次仅能添加一个条件
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.Filter(System.String,System.Object,Util.Expressions.Operator)">
            <summary>
            添加查询条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.Filter(Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            添加查询条件
            </summary>
            <param name="criteria">规约对象</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.FilterInt``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            添加整数范围过滤条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.FilterDouble``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            添加double范围过滤条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.FilterDecimal``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            添加decimal范围过滤条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.FilterDate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            添加日期范围过滤条件 - 不包含时间
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.FilterDateTime``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            添加日期范围过滤条件 - 包含时间
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.And(Util.Datas.Queries.IQuery{`0,`1})">
            <summary>
            与连接
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            与连接
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.Or(Util.Datas.Queries.IQuery{`0,`1})">
            <summary>
            或连接
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Queries.Query`2.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            或连接
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:Util.Datas.Queries.Query`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Queries.Query`1.#ctor">
            <summary>
            初始化查询对象
            </summary>
        </member>
        <member name="M:Util.Datas.Queries.Query`1.#ctor(Util.Domains.Repositories.IQueryEntity)">
            <summary>
            初始化查询对象
            </summary>
            <param name="queryEntity">查询实体</param>
        </member>
        <member name="T:Util.Domains.AggregateRoot`2">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:Util.Domains.AggregateRoot`2.#ctor(`1)">
            <summary>
            初始化聚合根
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="P:Util.Domains.AggregateRoot`2.Version">
            <summary>
            版本号(乐观锁)
            </summary>
        </member>
        <member name="T:Util.Domains.AggregateRoot`1">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Domains.AggregateRoot`1.#ctor(System.Guid)">
            <summary>
            初始化聚合根
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:Util.Domains.Auditing.CreationAuditedInitializer">
            <summary>
            创建操作审计初始化器
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.#ctor(System.Object,Util.Domains.Contexts.IUserContext)">
            <summary>
            初始化创建操作审计初始化器
            </summary>
            <param name="entity">实体</param>
            <param name="userContext">用户上下文</param>
        </member>
        <member name="F:Util.Domains.Auditing.CreationAuditedInitializer._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Util.Domains.Auditing.CreationAuditedInitializer._userContext">
            <summary>
            用户上下文
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.Init(System.Object,Util.Domains.Contexts.IUserContext)">
            <summary>
            初始化
            </summary>
            <param name="entity">实体</param>
            <param name="userContext">用户上下文</param>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.InitGuid">
            <summary>
            初始化Guid
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.InitNullableGuid">
            <summary>
            初始化可空Guid
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.InitInt">
            <summary>
            初始化int
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.InitNullableInt">
            <summary>
            初始化可空int
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.InitString">
            <summary>
            初始化字符串
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.InitLong">
            <summary>
            初始化Long
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.CreationAuditedInitializer.InitNullableLong">
            <summary>
            初始化可空Long
            </summary>
        </member>
        <member name="T:Util.Domains.Auditing.IAudited">
            <summary>
            操作审计
            </summary>
        </member>
        <member name="T:Util.Domains.Auditing.ICreationAudited`1">
            <summary>
            创建操作审计
            </summary>
        </member>
        <member name="P:Util.Domains.Auditing.ICreationAudited`1.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Util.Domains.Auditing.ICreationAudited`1.CreatorId">
            <summary>
            创建人编号
            </summary>
        </member>
        <member name="T:Util.Domains.Auditing.ICreationAudited">
            <summary>
            创建操作审计
            </summary>
        </member>
        <member name="T:Util.Domains.Auditing.IModificationAudited`1">
            <summary>
            修改操作审计
            </summary>
        </member>
        <member name="P:Util.Domains.Auditing.IModificationAudited`1.LastModificationTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:Util.Domains.Auditing.IModificationAudited`1.LastModifierId">
            <summary>
            最后修改人编号
            </summary>
        </member>
        <member name="T:Util.Domains.Auditing.IModificationAudited">
            <summary>
            修改操作审计
            </summary>
        </member>
        <member name="T:Util.Domains.Auditing.ModificationAuditedInitializer">
            <summary>
            修改操作审计初始化器
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.#ctor(System.Object,Util.Domains.Contexts.IUserContext)">
            <summary>
            初始化修改操作审计初始化器
            </summary>
            <param name="entity">实体</param>
            <param name="userContext">用户上下文</param>
        </member>
        <member name="F:Util.Domains.Auditing.ModificationAuditedInitializer._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Util.Domains.Auditing.ModificationAuditedInitializer._userContext">
            <summary>
            用户上下文
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.Init(System.Object,Util.Domains.Contexts.IUserContext)">
            <summary>
            初始化
            </summary>
            <param name="entity">实体</param>
            <param name="userContext">用户上下文</param>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.InitGuid">
            <summary>
            初始化Guid
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.InitNullableGuid">
            <summary>
            初始化可空Guid
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.InitInt">
            <summary>
            初始化int
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.InitNullableInt">
            <summary>
            初始化可空int
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.InitString">
            <summary>
            初始化字符串
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.InitLong">
            <summary>
            初始化Long
            </summary>
        </member>
        <member name="M:Util.Domains.Auditing.ModificationAuditedInitializer.InitNullableLong">
            <summary>
            初始化可空Long
            </summary>
        </member>
        <member name="T:Util.Domains.ChangeValue">
            <summary>
            变更值
            </summary>
        </member>
        <member name="M:Util.Domains.ChangeValue.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            初始化变更值
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <param name="isAttention">是否关注</param>
        </member>
        <member name="P:Util.Domains.ChangeValue.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Util.Domains.ChangeValue.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Util.Domains.ChangeValue.OldValue">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:Util.Domains.ChangeValue.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="P:Util.Domains.ChangeValue.IsAttention">
            <summary>
            是否关注
            </summary>
        </member>
        <member name="M:Util.Domains.ChangeValue.ToString">
            <summary>
            输出变更信息
            </summary>
        </member>
        <member name="T:Util.Domains.ChangeValueCollection">
            <summary>
            变更值集合
            </summary>
        </member>
        <member name="M:Util.Domains.ChangeValueCollection.Add(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            添加
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <param name="isAttention">是否关注</param>
        </member>
        <member name="P:Util.Domains.ChangeValueCollection.IsAttention">
            <summary>
            是否关注
            </summary>
        </member>
        <member name="M:Util.Domains.ChangeValueCollection.GetAttentionValues">
            <summary>
            获取关注的变更集
            </summary>
        </member>
        <member name="M:Util.Domains.ChangeValueCollection.ToString">
            <summary>
            输出变更信息
            </summary>
        </member>
        <member name="T:Util.Domains.Contexts.IUserContext">
            <summary>
            当前用户上下文信息
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.IsAuthenticated">
            <summary>
            是否认证(登录)
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.Ip">
            <summary>
            Ip
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.Host">
            <summary>
            主机名
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.ApplicationId">
            <summary>
            应用程序编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.ApplicationCode">
            <summary>
            应用程序编码
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.ApplicationName">
            <summary>
            应用程序名称
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.IsTenantEnabled">
            <summary>
            是否启用租户
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.IsHost">
            <summary>
            平台运营商
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.TenantId">
            <summary>
            租户编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.TenantCode">
            <summary>
            租户编码
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.TenantName">
            <summary>
            租户名称
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.OrganizationId">
            <summary>
            组织编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.OrganizationName">
            <summary>
            组织名称
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.UserId">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.Mobile">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.FullName">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.RoleIds">
            <summary>
            角色编号列表
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.Skin">
            <summary>
            皮肤
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.IUserContext.MenuStyle">
            <summary>
            菜单样式
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.IUserContext.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Util.Domains.Contexts.NullUserContext">
            <summary>
            空用户上下文
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.NullUserContext.#ctor">
            <summary>
            初始化空用户上下文
            </summary>
        </member>
        <member name="F:Util.Domains.Contexts.NullUserContext.Instance">
            <summary>
            空用户上下文实例
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.NullUserContext.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.IsAuthenticated">
            <summary>
            是否认证(登录)
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.Ip">
            <summary>
            Ip
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.Host">
            <summary>
            主机名
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.ApplicationId">
            <summary>
            应用程序编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.ApplicationCode">
            <summary>
            应用程序编码
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.ApplicationName">
            <summary>
            应用程序名称
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.IsTenantEnabled">
            <summary>
            是否启用租户
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.IsHost">
            <summary>
            平台运营商
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.TenantId">
            <summary>
            租户编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.TenantCode">
            <summary>
            租户编码
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.TenantName">
            <summary>
            租户名称
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.OrganizationId">
            <summary>
            组织编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.OrganizationName">
            <summary>
            组织名称
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.UserId">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.Mobile">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.FullName">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.RoleIds">
            <summary>
            角色编号列表
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.Skin">
            <summary>
            皮肤
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.NullUserContext.MenuStyle">
            <summary>
            菜单样式
            </summary>
        </member>
        <member name="T:Util.Domains.Contexts.UserContext">
            <summary>
            用户上下文
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.UserContext.#ctor(System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            初始化用户上下文
            </summary>
            <param name="isAuthenticated">是否认证</param>
            <param name="userId">是否认证</param>
            <param name="ip">Ip</param>
            <param name="host">主机名</param>
            <param name="browser">浏览器信息</param>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.Null">
            <summary>
            空用户上下文
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.UserContext.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.IsAuthenticated">
            <summary>
            是否认证(登录)
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.Ip">
            <summary>
            Ip
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.Host">
            <summary>
            主机名
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.ApplicationId">
            <summary>
            应用程序编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.ApplicationCode">
            <summary>
            应用程序编码
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.ApplicationName">
            <summary>
            应用程序名称
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.UserContext.SetApplication(System.String,System.String,System.String)">
            <summary>
            设置应用程序
            </summary>
            <param name="applicationId">应用程序编号</param>
            <param name="applicationCode">应用程序编码</param>
            <param name="applicationName">应用程序名称</param>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.IsTenantEnabled">
            <summary>
            是否启用租户
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.IsHost">
            <summary>
            平台运营商
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.TenantId">
            <summary>
            租户编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.TenantCode">
            <summary>
            租户编码
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.TenantName">
            <summary>
            租户名称
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.UserContext.SetTenant(System.String,System.Boolean,System.String,System.String)">
            <summary>
            设置租户
            </summary>
            <param name="tenantId">租户编号</param>
            <param name="isHost">平台运营商</param>
            <param name="tenantCode">租户编码</param>
            <param name="tenantName">租户名称</param>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.OrganizationId">
            <summary>
            组织编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.OrganizationName">
            <summary>
            组织名称
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.UserContext.SetOrganization(System.String,System.String)">
            <summary>
            设置组织
            </summary>
            <param name="organizationId">组织编号</param>
            <param name="organizationName">组织名称</param>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.UserId">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.Mobile">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.FullName">
            <summary>
            姓名
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.UserContext.SetUser(System.String,System.String,System.String,System.String)">
            <summary>
            设置用户信息
            </summary>
            <param name="userName">用户名</param>
            <param name="email">电子邮件</param>
            <param name="mobile">手机号</param>
            <param name="fullName">姓名</param>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.RoleIds">
            <summary>
            角色编号列表
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.UserContext.SetRole(System.String[],System.String)">
            <summary>
            设置角色
            </summary>
            <param name="roleIds">角色编号列表</param>
            <param name="roleName">角色名称</param>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.Skin">
            <summary>
            皮肤
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.UserContext.MenuStyle">
            <summary>
            菜单样式
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.UserContext.SetSkin(System.String,System.String)">
            <summary>
            设置皮肤
            </summary>
            <param name="skin">皮肤</param>
            <param name="menuStyle">菜单样式</param>
        </member>
        <member name="T:Util.Domains.Contexts.ApplicationContext">
            <summary>
            应用程序上下文
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.ApplicationContext.SetPrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            设置当前安全主体
            </summary>
            <param name="user">安全主体</param>
        </member>
        <member name="P:Util.Domains.Contexts.ApplicationContext.User">
            <summary>
            获取当前用户上下文
            </summary>
        </member>
        <member name="M:Util.Domains.Contexts.ApplicationContext.GetPrincipal">
            <summary>
            获取当前安全主体
            </summary>
        </member>
        <member name="P:Util.Domains.Contexts.ApplicationContext.TenantId">
            <summary>
            获取租户编号
            </summary>
        </member>
        <member name="T:Util.Domains.DomainBase`1">
            <summary>
            领域层顶级基类
            </summary>
        </member>
        <member name="M:Util.Domains.DomainBase`1.#ctor">
            <summary>
            初始化领域层顶级基类
            </summary>
        </member>
        <member name="F:Util.Domains.DomainBase`1._rules">
            <summary>
            验证规则集合
            </summary>
        </member>
        <member name="F:Util.Domains.DomainBase`1._handler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="F:Util.Domains.DomainBase`1._changeValues">
            <summary>
            变更值集合
            </summary>
        </member>
        <member name="M:Util.Domains.DomainBase`1.SetValidationHandler(Util.Validations.IValidationHandler)">
            <summary>
            设置验证处理器
            </summary>
            <param name="handler">验证处理器</param>
        </member>
        <member name="M:Util.Domains.DomainBase`1.AddValidationRules(System.Collections.Generic.IEnumerable{Util.Validations.IValidationRule})">
            <summary>
            添加验证规则列表
            </summary>
            <param name="rules">验证规则列表</param>
        </member>
        <member name="M:Util.Domains.DomainBase`1.AddValidationRule(Util.Validations.IValidationRule)">
            <summary>
            添加验证规则
            </summary>
            <param name="rule">验证规则</param>
        </member>
        <member name="M:Util.Domains.DomainBase`1.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:Util.Domains.DomainBase`1.GetValidationResult">
            <summary>
            获取验证结果
            </summary>
        </member>
        <member name="M:Util.Domains.DomainBase`1.Validate(Util.Validations.ValidationResultCollection)">
            <summary>
            验证并添加到验证结果集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Util.Domains.DomainBase`1.HandleValidationResult(Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证结果
            </summary>
        </member>
        <member name="M:Util.Domains.DomainBase`1.IsNull">
            <summary>
            是否空对象
            </summary>
        </member>
        <member name="M:Util.Domains.DomainBase`1.GetChanges(`0)">
            <summary>
            获取变更属性
            </summary>
            <param name="newEntity">新对象</param>
        </member>
        <member name="M:Util.Domains.DomainBase`1.AddChanges(`0)">
            <summary>
            添加变更列表
            </summary>
            <param name="newEntity">新对象</param>
        </member>
        <member name="M:Util.Domains.DomainBase`1.AddChange``1(System.String,System.String,``0,``0,System.Boolean)">
            <summary>
            添加变更
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值,范例：this.Name</param>
            <param name="newValue">新值,范例：newEntity.Name</param>
            <param name="isAttention">是否关注</param>
        </member>
        <member name="M:Util.Domains.DomainBase`1.AddChange``1(Util.Domains.ICompareChange{``0},``0)">
            <summary>
            添加变更
            </summary>
            <param name="oldObject">旧对象</param>
            <param name="newObject">新对象</param>
        </member>
        <member name="M:Util.Domains.DomainBase`1.AddChange``1(System.Collections.Generic.IEnumerable{Util.Domains.ICompareChange{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加变更
            </summary>
            <param name="oldObjects">旧对象列表</param>
            <param name="newObjects">新对象列表</param>
        </member>
        <member name="T:Util.Domains.DomainServiceBase">
            <summary>
            领域服务
            </summary>
        </member>
        <member name="P:Util.Domains.DomainServiceBase.Log">
            <summary>
            日志操作
            </summary>
        </member>
        <member name="T:Util.Domains.EntityBase`2">
            <summary>
            领域实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:Util.Domains.EntityBase`2.#ctor(`1)">
            <summary>
            初始化领域实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="P:Util.Domains.EntityBase`2.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="F:Util.Domains.EntityBase`2._userContext">
            <summary>
            用户上下文
            </summary>
        </member>
        <member name="M:Util.Domains.EntityBase`2.GetUserContext">
            <summary>
            获取用户上下文
            </summary>
        </member>
        <member name="M:Util.Domains.EntityBase`2.Equals(System.Object)">
            <summary>
            相等运算
            </summary>
        </member>
        <member name="M:Util.Domains.EntityBase`2.GetHashCode">
            <summary>
            获取哈希
            </summary>
        </member>
        <member name="M:Util.Domains.EntityBase`2.op_Equality(Util.Domains.EntityBase{`0,`1},Util.Domains.EntityBase{`0,`1})">
            <summary>
            相等比较
            </summary>
            <param name="entity1">领域实体1</param>
            <param name="entity2">领域实体2</param>
        </member>
        <member name="M:Util.Domains.EntityBase`2.op_Inequality(Util.Domains.EntityBase{`0,`1},Util.Domains.EntityBase{`0,`1})">
            <summary>
            不相等比较
            </summary>
            <param name="entity1">领域实体1</param>
            <param name="entity2">领域实体2</param>
        </member>
        <member name="M:Util.Domains.EntityBase`2.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Util.Domains.EntityBase`2.CreateId">
            <summary>
            创建标识
            </summary>
        </member>
        <member name="M:Util.Domains.EntityBase`2.Validate(Util.Validations.ValidationResultCollection)">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Util.Domains.Exists.AddCriteriaOfExistingCode`1">
            <summary>
            添加时编码不能重复条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Domains.Exists.AddCriteriaOfExistingCode`1.#ctor(`0)">
            <summary>
            初始化添加时编码不能重复条件
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="F:Util.Domains.Exists.AddCriteriaOfExistingCode`1._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Util.Domains.Exists.AddCriteriaOfExistingCode`1._builder">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="M:Util.Domains.Exists.AddCriteriaOfExistingCode`1.GetPredicate">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Domains.Exists.AddCriteriaOfExistingName`1">
            <summary>
            添加时名称不能重复条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Domains.Exists.AddCriteriaOfExistingName`1.#ctor(`0)">
            <summary>
            初始化添加时名称不能重复条件
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="F:Util.Domains.Exists.AddCriteriaOfExistingName`1._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Util.Domains.Exists.AddCriteriaOfExistingName`1._builder">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="M:Util.Domains.Exists.AddCriteriaOfExistingName`1.GetPredicate">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Domains.Exists.ICode">
            <summary>
            用于验证编码是否重复
            </summary>
        </member>
        <member name="P:Util.Domains.Exists.ICode.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="T:Util.Domains.Exists.IName">
            <summary>
            用于验证名称是否重复
            </summary>
        </member>
        <member name="P:Util.Domains.Exists.IName.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Util.Domains.Exists.UpdateCriteriaOfExistingCode`2">
            <summary>
            修改时编码不能重复条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Util.Domains.Exists.UpdateCriteriaOfExistingCode`2.#ctor(`0)">
            <summary>
            初始化修改时名称不能重复条件
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="F:Util.Domains.Exists.UpdateCriteriaOfExistingCode`2._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Util.Domains.Exists.UpdateCriteriaOfExistingCode`2._builder">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="M:Util.Domains.Exists.UpdateCriteriaOfExistingCode`2.GetPredicate">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Domains.Exists.UpdateCriteriaOfExistingName`2">
            <summary>
            修改时名称不能重复条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Util.Domains.Exists.UpdateCriteriaOfExistingName`2.#ctor(`0)">
            <summary>
            初始化修改时名称不能重复条件
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="F:Util.Domains.Exists.UpdateCriteriaOfExistingName`2._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Util.Domains.Exists.UpdateCriteriaOfExistingName`2._builder">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="M:Util.Domains.Exists.UpdateCriteriaOfExistingName`2.GetPredicate">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Domains.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="P:Util.Domains.IAggregateRoot.Version">
            <summary>
            版本号(乐观锁)
            </summary>
        </member>
        <member name="T:Util.Domains.IAggregateRoot`1">
            <summary>
            聚合根
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Util.Domains.IAggregateRoot`2">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Util.Domains.ICompareChange`1">
            <summary>
            通过对象比较获取变更属性集
            </summary>
            <typeparam name="T">领域对象类型</typeparam>
        </member>
        <member name="M:Util.Domains.ICompareChange`1.GetChanges(`0)">
            <summary>
            获取变更属性
            </summary>
            <param name="other">其它领域对象</param>
        </member>
        <member name="T:Util.Domains.IDelete">
            <summary>
            逻辑删除
            </summary>
        </member>
        <member name="P:Util.Domains.IDelete.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="T:Util.Domains.IDomainObject">
            <summary>
            领域对象
            </summary>
        </member>
        <member name="M:Util.Domains.IDomainObject.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Util.Domains.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="M:Util.Domains.IEntity.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:Util.Domains.IEntity`1">
            <summary>
            实体
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:Util.Domains.IEntity`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:Util.Domains.IEntity`2">
            <summary>
            实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Util.Domains.INullObject">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Util.Domains.INullObject.IsNull">
            <summary>
            是否空对象
            </summary>
        </member>
        <member name="T:Util.Domains.NullObject">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Util.Domains.NullObject.IsNull">
            <summary>
            是否空对象
            </summary>
        </member>
        <member name="T:Util.Domains.Repositories.ICodeGenerator">
            <summary>
            流水号生成器
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.ICodeGenerator.GenerateCode(System.String)">
            <summary>
            生成流水号
            </summary>
            <param name="name">名称，根据该名称对流水号进行隔离</param>
        </member>
        <member name="T:Util.Domains.Repositories.ICriteria`1">
            <summary>
            查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Domains.Repositories.ICriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Util.Domains.Repositories.IPager">
            <summary>
            分页
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IPager.GetPageCount">
            <summary>
            获取总页数
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IPager.GetSkipCount">
            <summary>
            获取跳过的行数
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.IPager.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IPager.GetStartNumber">
            <summary>
            获取起始行数
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IPager.GetEndNumber">
            <summary>
            获取结束行数
            </summary>
        </member>
        <member name="T:Util.Domains.Repositories.IPagerBase">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.IPagerBase.Page">
            <summary>
            页数，即第几页，从1开始
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.IPagerBase.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.IPagerBase.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="T:Util.Domains.Repositories.IQueryEntity">
            <summary>
            查询实体
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.IQueryEntity.Keyword">
            <summary>
            搜索关键字
            </summary>
        </member>
        <member name="T:Util.Domains.Repositories.IRepository`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Update(`0,`0)">
            <summary>
            修改实体
            </summary>
            <param name="newEntity">新实体</param>
            <param name="oldEntity">旧实体</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Remove(`1)">
            <summary>
            移除实体
            </summary>
            <param name="id">实体标识</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">实体编号集合</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            移除实体
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.FindAsNoTracking">
            <summary>
            获取未跟踪的实体集
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Find">
            <summary>
            查找实体集合
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Find(Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            查找实体集合
            </summary>
            <param name="criteria">条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Find(System.Object[])">
            <summary>
            查找实体
            </summary>
            <param name="id">实体标识</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体集合
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.FindByIds(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">实体标识列表</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">用逗号分隔的Id列表，范例："83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.FindList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体集合
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.FindAll">
            <summary>
            查找实体集合
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取单个实体
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断实体是否存在
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Exists(Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            判断实体是否存在
            </summary>
            <param name="criteria">条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.OrderBy(System.Linq.IQueryable{`0},System.String)">
            <summary>
            排序
            </summary>
            <param name="queryable">查询对象</param>
            <param name="orderBy">排序列表</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.QueryAsNoTracking(Util.Datas.Queries.IQueryBase{`0})">
            <summary>
            获取未跟踪的实体集
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Query(Util.Datas.Queries.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.PagerQuery(Util.Datas.Queries.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取实体个数
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.Clear">
            <summary>
            清空实体
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.ClearCache">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.IRepository`2.GetUnitOfWork">
            <summary>
            获取工作单元
            </summary>
        </member>
        <member name="T:Util.Domains.Repositories.IRepository`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Util.Domains.Repositories.Pager">
            <summary>
            分页
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.Pager.#ctor">
            <summary>
            初始化分页
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.Pager.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            初始化分页
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数,默认20</param> 
            <param name="order">排序条件</param>
        </member>
        <member name="M:Util.Domains.Repositories.Pager.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            初始化分页
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数,默认20</param> 
            <param name="totalCount">总行数</param>
            <param name="order">排序条件</param>
        </member>
        <member name="P:Util.Domains.Repositories.Pager.Page">
            <summary>
            页索引，即第几页，从1开始
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.Pager.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.Pager.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.Pager.GetPageCount">
            <summary>
            获取总页数
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.Pager.GetSkipCount">
            <summary>
            获取跳过的行数
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.Pager.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.Pager.GetStartNumber">
            <summary>
            起始行数
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.Pager.GetEndNumber">
            <summary>
            结束行数
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.Pager.AddDescriptions">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="T:Util.Domains.Repositories.PagerList`1">
            <summary>
            分页集合
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="M:Util.Domains.Repositories.PagerList`1.#ctor(Util.Domains.Repositories.IPager)">
            <summary>
            分页集合
            </summary>
            <param name="pager">查询对象</param>
        </member>
        <member name="M:Util.Domains.Repositories.PagerList`1.#ctor(System.Int32)">
            <summary>
            分页集合
            </summary>
            <param name="totalCount">总行数</param>
        </member>
        <member name="M:Util.Domains.Repositories.PagerList`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            分页集合
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param>
            <param name="totalCount">总行数</param>
        </member>
        <member name="M:Util.Domains.Repositories.PagerList`1.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            分页集合
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param>
            <param name="totalCount">总行数</param>
            <param name="order">排序条件</param>
        </member>
        <member name="P:Util.Domains.Repositories.PagerList`1.Page">
            <summary>
            页索引，即第几页，从1开始
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.PagerList`1.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.PagerList`1.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.PagerList`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.PagerList`1.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.PagerList`1.Convert``1(System.Func{`0,``0})">
            <summary>
            转换分页集合的元素类型
            </summary>
            <typeparam name="TResult">目标元素类型</typeparam>
            <param name="converter">转换方法</param>
        </member>
        <member name="T:Util.Domains.Repositories.QueryEntityBase">
            <summary>
            查询实体
            </summary>
        </member>
        <member name="P:Util.Domains.Repositories.QueryEntityBase.Keyword">
            <summary>
            搜索关键字
            </summary>
        </member>
        <member name="M:Util.Domains.Repositories.QueryEntityBase.AddDescriptions">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="T:Util.Domains.StateDescription">
            <summary>
            状态描述
            </summary>
        </member>
        <member name="F:Util.Domains.StateDescription._description">
            <summary>
            描述
            </summary>
        </member>
        <member name="M:Util.Domains.StateDescription.ToString">
            <summary>
            输出对象状态
            </summary>
        </member>
        <member name="M:Util.Domains.StateDescription.AddDescriptions">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="M:Util.Domains.StateDescription.AddDescription(System.String)">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="M:Util.Domains.StateDescription.AddDescription``1(System.String,``0)">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="T:Util.Domains.Tenants.ITenant">
            <summary>
            租户
            </summary>
        </member>
        <member name="P:Util.Domains.Tenants.ITenant.TenantId">
            <summary>
            租户编号
            </summary>
        </member>
        <member name="T:Util.Domains.Trees.ITreeEntity`3">
            <summary>
            树型实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父编号类型</typeparam>
        </member>
        <member name="P:Util.Domains.Trees.ITreeEntity`3.Parent">
            <summary>
            父对象
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.ITreeEntity`3.ParentId">
            <summary>
            父编号
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.ITreeEntity`3.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.ITreeEntity`3.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.ITreeEntity`3.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.ITreeEntity`3.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.ITreeEntity`3.InitPath">
            <summary>
            初始化路径
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.ITreeEntity`3.InitPath(`0)">
            <summary>
            初始化路径
            </summary>
            <param name="parent">父对象</param>
        </member>
        <member name="M:Util.Domains.Trees.ITreeEntity`3.GetParentIdsFromPath(System.Boolean)">
            <summary>
            从路径中获取所有上级节点编号
            </summary>
            <param name="excludeSelf">是否排除当前节点,默认排除自身</param>
        </member>
        <member name="T:Util.Domains.Trees.ITreeQuery`1">
            <summary>
            树型查询实体
            </summary>
            <typeparam name="TParentId">父编号类型</typeparam>
        </member>
        <member name="P:Util.Domains.Trees.ITreeQuery`1.ParentId">
            <summary>
            父编号
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.ITreeQuery`1.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.ITreeQuery`1.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.ITreeQuery`1.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.ITreeQuery`1.IsEmpty">
            <summary>
            查询参数是否全部为空
            </summary>
        </member>
        <member name="T:Util.Domains.Trees.ITreeQuery">
            <summary>
            树型实体查询参数
            </summary>
        </member>
        <member name="T:Util.Domains.Trees.TreeCriteria`3">
            <summary>
            树型实体查询条件
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeCriteria`3.#ctor(Util.Domains.Trees.ITreeQuery{`2})">
            <summary>
            初始化树型实体查询条件
            </summary>
            <param name="query">树型实体查询条件</param>
        </member>
        <member name="P:Util.Domains.Trees.TreeCriteria`3.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeCriteria`3.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:Util.Domains.Trees.TreeCriteria`1">
            <summary>
            树型实体查询条件
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeCriteria`1.#ctor(Util.Domains.Trees.ITreeQuery)">
            <summary>
            初始化树型实体查询条件
            </summary>
            <param name="query">树型实体查询条件</param>
        </member>
        <member name="T:Util.Domains.Trees.TreeEntityBase`3">
            <summary>
            树型实体
            </summary>
            <typeparam name="TEntity">树型实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
            <typeparam name="TParentId">父编号类型</typeparam>
        </member>
        <member name="M:Util.Domains.Trees.TreeEntityBase`3.#ctor(`1,System.String,System.Int32)">
            <summary>
            初始化树型实体
            </summary>
            <param name="id">标识</param>
            <param name="path">路径</param>
            <param name="level">级数</param>
        </member>
        <member name="P:Util.Domains.Trees.TreeEntityBase`3.Parent">
            <summary>
            父对象
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeEntityBase`3.ParentId">
            <summary>
            父编号
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeEntityBase`3.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeEntityBase`3.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeEntityBase`3.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeEntityBase`3.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeEntityBase`3.InitPath(`0)">
            <summary>
            初始化路径
            </summary>
            <param name="parent">父对象</param>
        </member>
        <member name="M:Util.Domains.Trees.TreeEntityBase`3.InitPath">
            <summary>
            初始化路径
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeEntityBase`3.InitFirstLevel">
            <summary>
            初始化1级节点
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeEntityBase`3.InitChild(`0)">
            <summary>
            初始化下级节点
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeEntityBase`3.GetParentIdsFromPath(System.Boolean)">
            <summary>
            从路径中获取所有上级节点编号
            </summary>
            <param name="excludeSelf">是否排除当前节点,默认排除自身</param>
        </member>
        <member name="T:Util.Domains.Trees.TreeEntityBase`1">
            <summary>
            树型实体
            </summary>
            <typeparam name="TEntity">树型实体类型</typeparam>
        </member>
        <member name="M:Util.Domains.Trees.TreeEntityBase`1.#ctor(System.Guid,System.String,System.Int32)">
            <summary>
            初始化树型实体
            </summary>
            <param name="id">标识</param>
            <param name="path">路径</param>
            <param name="level">级数</param>
        </member>
        <member name="T:Util.Domains.Trees.TreeQueryBase`1">
            <summary>
            树型实体查询参数
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeQueryBase`1.#ctor">
            <summary>
            初始化树型实体查询参数
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeQueryBase`1.ParentId">
            <summary>
            父编号
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeQueryBase`1.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeQueryBase`1.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:Util.Domains.Trees.TreeQueryBase`1.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeQueryBase`1.AddDescriptions">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="F:Util.Domains.Trees.TreeQueryBase`1._isEmpty">
            <summary>
            参数是否为空
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeQueryBase`1.IsEmpty">
            <summary>
            查询参数是否全部为空
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeQueryBase`1.CheckEmpty">
            <summary>
            检查查询参数是否全部为空值
            </summary>
        </member>
        <member name="M:Util.Domains.Trees.TreeQueryBase`1.AddValue``1(``0)">
            <summary>
            添加参数值
            </summary>
        </member>
        <member name="T:Util.Domains.Trees.TreeQueryBase">
            <summary>
            树型实体查询参数
            </summary>
        </member>
        <member name="T:Util.Domains.ValueObjectBase`1">
            <summary>
            值对象
            </summary>
            <typeparam name="TValueObject">值对象类型</typeparam>
        </member>
        <member name="M:Util.Domains.ValueObjectBase`1.Equals(`0)">
            <summary>
            相等性比较
            </summary>
        </member>
        <member name="M:Util.Domains.ValueObjectBase`1.Equals(System.Object)">
            <summary>
            相等性比较
            </summary>
        </member>
        <member name="M:Util.Domains.ValueObjectBase`1.op_Equality(Util.Domains.ValueObjectBase{`0},Util.Domains.ValueObjectBase{`0})">
            <summary>
            相等性比较
            </summary>
        </member>
        <member name="M:Util.Domains.ValueObjectBase`1.op_Inequality(Util.Domains.ValueObjectBase{`0},Util.Domains.ValueObjectBase{`0})">
            <summary>
            不相等比较
            </summary>
        </member>
        <member name="M:Util.Domains.ValueObjectBase`1.GetHashCode">
            <summary>
            获取哈希
            </summary>
        </member>
        <member name="M:Util.Domains.ValueObjectBase`1.Clone">
            <summary>
            克隆副本
            </summary>
        </member>
        <member name="T:Util.Exceptions.ConcurrencyException">
            <summary>
            并发异常
            </summary>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor">
            <summary>
            初始化并发异常
            </summary>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.String)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.Exception)">
            <summary>
            初始化并发异常
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
            <param name="code">错误码</param>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception,System.String,Util.Logs.LogLevel)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
            <param name="code">错误码</param>
            <param name="level">日志级别</param>
        </member>
        <member name="T:Util.Exceptions.Prompts.ConcurrencyExceptionPrompt">
            <summary>
            并发异常提示
            </summary>
        </member>
        <member name="M:Util.Exceptions.Prompts.ConcurrencyExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="T:Util.Exceptions.Prompts.DataBaseRefrencePrompt">
            <summary>
            数据库外键约束异常提示
            </summary>
        </member>
        <member name="M:Util.Exceptions.Prompts.DataBaseRefrencePrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.Prompts.DataBaseRefrencePrompt.IsRefrenceError(System.Exception)">
            <summary>
            是否数据库外键约束错误
            </summary>
        </member>
        <member name="T:Util.Exceptions.Prompts.ExceptionPrompt">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="M:Util.Exceptions.Prompts.ExceptionPrompt.#ctor">
            <summary>
            初始化异常提示
            </summary>
        </member>
        <member name="F:Util.Exceptions.Prompts.ExceptionPrompt._prompts">
            <summary>
            异常提示组件集合
            </summary>
        </member>
        <member name="F:Util.Exceptions.Prompts.ExceptionPrompt.Instance">
            <summary>
            获取异常提示实例
            </summary>
        </member>
        <member name="M:Util.Exceptions.Prompts.ExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.Prompts.ExceptionPrompt.GetSystemExceptionPrompt(System.Exception)">
            <summary>
            获取系统异常提示
            </summary>
        </member>
        <member name="T:Util.Exceptions.Prompts.IExceptionPrompt">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="M:Util.Exceptions.Prompts.IExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="T:Util.Exceptions.UnauthenticatedException">
            <summary>
            未授权访问异常
            </summary>
        </member>
        <member name="M:Util.Exceptions.UnauthenticatedException.#ctor(System.Exception)">
            <summary>
            初始化未授权访问异常
            </summary>
        </member>
        <member name="M:Util.Exceptions.UnauthenticatedException.#ctor(System.String,System.Exception)">
            <summary>
            初始化未授权访问异常
            </summary>
        </member>
        <member name="T:Util.Exceptions.Warning">
            <summary>
            应用程序异常
            </summary>
        </member>
        <member name="M:Util.Exceptions.Warning.#ctor(System.String)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Util.Exceptions.Warning.#ctor(System.String,System.String)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
        </member>
        <member name="M:Util.Exceptions.Warning.#ctor(System.String,System.String,Util.Logs.LogLevel)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="level">日志级别</param>
        </member>
        <member name="M:Util.Exceptions.Warning.#ctor(System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.Warning.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.Warning.#ctor(System.String,System.String,Util.Logs.LogLevel,System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.Warning.GetMessage">
            <summary>
            获取错误消息
            </summary>
        </member>
        <member name="M:Util.Exceptions.Warning.AppendSelfMessage(System.Text.StringBuilder)">
            <summary>
            添加外层异常消息
            </summary>
        </member>
        <member name="M:Util.Exceptions.Warning.AppendInnerMessage(System.Text.StringBuilder,System.Exception)">
            <summary>
            添加内部异常消息
            </summary>
        </member>
        <member name="M:Util.Exceptions.Warning.GetData(System.Exception)">
            <summary>
            获取添加的额外数据
            </summary>
        </member>
        <member name="F:Util.Exceptions.Warning._message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Util.Exceptions.Warning.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Util.Exceptions.Warning.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Util.Exceptions.Warning.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Util.Exceptions.Warning.StackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="M:Util.Exceptions.Warning.GetPrompt">
            <summary>
            获取友情提示
            </summary>
        </member>
        <member name="T:Util.Expressions.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:Util.Expressions.DataType.None">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Util.Expressions.DataType.Int">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:Util.Expressions.DataType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:Util.Expressions.DataType.DateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:Util.Expressions.DataType.Bool">
            <summary>
            布尔值
            </summary>
        </member>
        <member name="F:Util.Expressions.DataType.Enum">
            <summary>
            枚举
            </summary>
        </member>
        <member name="T:Util.Expressions.ExpressionInfo">
            <summary>
            表达式信息
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.Type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.Required">
            <summary>
            是否验证必填项
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.RequiredMessage">
            <summary>
            必填项验证消息
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.MaxLength">
            <summary>
            最大字符串长度
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.MinLength">
            <summary>
            最小字符串长度
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.StringLengthMessage">
            <summary>
            字符串长度验证消息
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.Email">
            <summary>
            是否验证电子邮件
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.EmailMessage">
            <summary>
            电子邮件验证消息
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.Url">
            <summary>
            是否验证Url
            </summary>
        </member>
        <member name="P:Util.Expressions.ExpressionInfo.UrlMessage">
            <summary>
            Url验证消息
            </summary>
        </member>
        <member name="T:Util.Expressions.ExpressionInfoResolver`2">
            <summary>
            表达式信息解析器
            </summary>
        </member>
        <member name="M:Util.Expressions.ExpressionInfoResolver`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            初始化表达式信息解析器
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="F:Util.Expressions.ExpressionInfoResolver`2._expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="F:Util.Expressions.ExpressionInfoResolver`2._expressionInfo">
            <summary>
            表达式信息
            </summary>
        </member>
        <member name="M:Util.Expressions.ExpressionInfoResolver`2.Resolve">
            <summary>
            解析表达式
            </summary>
        </member>
        <member name="T:Util.Expressions.Operator">
            <summary>
            表达式操作符
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.Starts">
            <summary>
            头匹配
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.Ends">
            <summary>
            尾匹配
            </summary>
        </member>
        <member name="F:Util.Expressions.Operator.Contains">
            <summary>
            模糊匹配
            </summary>
        </member>
        <member name="T:Util.Expressions.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:Util.Expressions.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Util.Expressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化参数重绑定操作
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:Util.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
        </member>
        <member name="M:Util.Expressions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数</param>
        </member>
        <member name="T:Util.Expressions.PredicateExpressionBuilder`1">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="M:Util.Expressions.PredicateExpressionBuilder`1.#ctor">
            <summary>
            初始化谓词表达式生成器
            </summary>
        </member>
        <member name="F:Util.Expressions.PredicateExpressionBuilder`1._parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Util.Expressions.PredicateExpressionBuilder`1._result">
            <summary>
            结果表达式
            </summary>
        </member>
        <member name="M:Util.Expressions.PredicateExpressionBuilder`1.GetParameter">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Util.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Util.Expressions.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Expressions.PredicateExpressionBuilder`1.Append(System.String,Util.Expressions.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Expressions.PredicateExpressionBuilder`1.ToLambda">
            <summary>
            转换为Lambda表达式
            </summary>
        </member>
        <member name="T:Util.Extensions">
            <summary>
            系统扩展 - 公共扩展
            </summary>
            <summary>
            系统扩展 - 类型转换
            </summary>
            <summary>
            系统扩展 - 日期扩展
            </summary>
            <summary>
            系统扩展 - 异常扩展
            </summary>
            <summary>
            系统扩展 - 格式化
            </summary>
            <summary>
            系统扩展 - Lambda表达式扩展
            </summary>
            <summary>
            系统扩展 - 验证
            </summary>
        </member>
        <member name="M:Util.Extensions.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全获取值，当值为null时，不会抛出异常
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:Util.Extensions.Value(System.Enum)">
            <summary>
            获取枚举值
            </summary>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:Util.Extensions.Value``1(System.Enum)">
            <summary>
            获取枚举值
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:Util.Extensions.Description(System.Enum)">
            <summary>
            获取枚举描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:Util.Extensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            转换为用分隔符连接的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号 "'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
        </member>
        <member name="M:Util.Extensions.SafeString(System.Object)">
            <summary>
            安全转换为字符串，去除两端空格，当值为null时返回""
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Extensions.ToBool(System.String)">
            <summary>
            转换为bool
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToBoolOrNull(System.String)">
            <summary>
            转换为可空bool
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToInt(System.String)">
            <summary>
            转换为int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToIntOrNull(System.String)">
            <summary>
            转换为可空int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToLong(System.String)">
            <summary>
            转换为long
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToLongOrNull(System.String)">
            <summary>
            转换为可空long
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDouble(System.String)">
            <summary>
            转换为double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDoubleOrNull(System.String)">
            <summary>
            转换为可空double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDecimal(System.String)">
            <summary>
            转换为decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDecimalOrNull(System.String)">
            <summary>
            转换为可空decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDate(System.String)">
            <summary>
            转换为日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDateOrNull(System.String)">
            <summary>
            转换为可空日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToGuid(System.String)">
            <summary>
            转换为Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToGuidOrNull(System.String)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">数据,范例: "83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Util.Extensions.ToGuidList(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">字符串集合</param>
        </member>
        <member name="M:Util.Extensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Util.Extensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Util.Extensions.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToChineseDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Util.Extensions.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Util.Extensions.Log(System.Exception,Util.Logs.ILog)">
            <summary>
            写日志
            </summary>
            <param name="exception">异常</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Util.Extensions.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Extensions.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">文本</param>
            <param name="length">返回长度</param>
            <param name="endCharCount">添加结束符号的个数，默认0，不添加</param>
            <param name="endChar">结束符号，默认为省略号</param>
        </member>
        <member name="M:Util.Extensions.Description(System.Boolean)">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:Util.Extensions.Description(System.Nullable{System.Boolean})">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Int32,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Nullable{System.Int32},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Decimal,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Nullable{System.Decimal},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Double,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Nullable{System.Double},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.FormatRmb(System.Decimal)">
            <summary>
            获取格式化字符串,带￥
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatRmb(System.Nullable{System.Decimal})">
            <summary>
            获取格式化字符串,带￥
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatPercent(System.Decimal)">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatPercent(System.Nullable{System.Decimal})">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatPercent(System.Double)">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatPercent(System.Nullable{System.Double})">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名,支持多级属性名，与句点分隔，范例：Customer.Name</param>
        </member>
        <member name="M:Util.Extensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
        </member>
        <member name="M:Util.Extensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Util.Extensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            头匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Contains(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Operation(System.Linq.Expressions.Expression,Util.Expressions.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Util.Extensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
        </member>
        <member name="M:Util.Extensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Util.Extensions.CheckNull(System.Object,System.String)">
            <summary>
            检测对象是否为null,为null则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <param name="obj">对象</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:Util.Extensions.IsEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.IsEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.IsEmpty(System.Nullable{System.Guid})">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.GetErrorMessage(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            获取验证特性的错误消息
            </summary>
            <param name="attribute">验证特性</param>
        </member>
        <member name="M:Util.Extensions.FilterErrorMessage(System.String)">
            <summary>
            过滤错误消息
            </summary>
        </member>
        <member name="T:Util.Files.DefaultUploadPath">
            <summary>
            默认上传路径
            </summary>
        </member>
        <member name="M:Util.Files.DefaultUploadPath.GetPath(System.String,System.String,System.String)">
            <summary>
            获取上传路径,形式：\文件分类目录\文件名-HHmmss.扩展名
            </summary>
            <param name="fileName">文件名，包含扩展名</param>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基目录</param>
        </member>
        <member name="T:Util.Files.FileInfo">
            <summary>
            文件信息
            </summary>
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.#ctor(System.String,System.Byte[],System.Nullable{System.Int64},System.String)">
            <summary>
            初始化文件信息
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.GetFileName(System.String,System.String)">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.FilePath">
            <summary>
            文件相对路径
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.FileName">
            <summary>
            文件名，不包括扩展名
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.FileBytes">
            <summary>
            文件字节流
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.Length">
            <summary>
            文件长度,单位：字节
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.Create(System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            创建文件信息
            </summary>
            <param name="filePath">文件相对路径</param>
            <param name="fileSize">文件大小</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Util.Files.FileInfo.Create(System.String,System.Byte[],System.String)">
            <summary>
            创建文件信息
            </summary>
            <param name="filePath">文件相对路径</param>
            <param name="fileBytes">文件字节流</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Util.Files.FileInfo.Join(System.String,System.String)">
            <summary>
            合并路径
            </summary>
            <param name="filePath">文件路径</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetFileName(System.String)">
            <summary>
            从文件路径中获取文件名(包含扩展名)
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetFileNameWithoutExtension(System.String)">
            <summary>
            从文件路径中获取文件名(不包含扩展名)
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetExtension(System.String)">
            <summary>
            从文件路径中获取扩展名
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetDirectoryName(System.String)">
            <summary>
            从文件路径中获取目录
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetSafeName(System.String)">
            <summary>
            获取更安全的文件名，过滤无效字符，将汉字转成拼音简码，且对文件名添加时分秒，更不易重复，范例：@中国*.jpg，结果为zg-112233.jpg
            </summary>
            <param name="fileName">文件名，包含扩展名，范例：c.jpg</param>
        </member>
        <member name="M:Util.Files.FileInfo.ValidateFileName(System.String)">
            <summary>
            验证文件名
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.FilterFileName(System.String)">
            <summary>
            过滤文件名
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.GetPhysicalPath">
            <summary>
            获取文件的绝对路径,范例：c:/a.jpg
            </summary>
        </member>
        <member name="T:Util.Files.FileManager">
            <summary>
            文件管理器
            </summary>
        </member>
        <member name="F:Util.Files.FileManager._result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:Util.Files.FileManager.FilePath">
            <summary>
            文件绝对路径
            </summary>
        </member>
        <member name="M:Util.Files.FileManager.Append(System.String)">
            <summary>
            添加内容到文件末尾
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Util.Files.FileManager.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Util.Files.FileManager.Remove(System.String)">
            <summary>
            移除内容
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Util.Files.FileManager.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除内容
            </summary>
            <param name="list">内容列表</param>
        </member>
        <member name="M:Util.Files.FileManager.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Util.Files.FileManager.DeleteFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件列表
            </summary>
            <param name="paths">文件路径列表</param>
        </member>
        <member name="T:Util.Files.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.#ctor(System.Int64,Util.Files.FileUnit)">
            <summary>
            初始化文件大小
            </summary>
            <param name="size">文件字节大小</param>
            <param name="unit">文件字节大小</param>
        </member>
        <member name="M:Util.Files.FileSize.GetSize(System.Int64,Util.Files.FileUnit)">
            <summary>
            获取文件大小
            </summary>
        </member>
        <member name="P:Util.Files.FileSize.Size">
            <summary>
            文件字节长度
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.GetSizeByG">
            <summary>
            获取文件大小，单位：G
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.GetSizeByM">
            <summary>
            获取文件大小，单位：M
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.GetSizeByK">
            <summary>
            获取文件大小，单位：K
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.GetSize">
            <summary>
            获取文件大小，单位：字节
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.ToString">
            <summary>
            输出描述
            </summary>
        </member>
        <member name="T:Util.Files.FileUnit">
            <summary>
            文件容量单位
            </summary>
        </member>
        <member name="F:Util.Files.FileUnit.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:Util.Files.FileUnit.K">
            <summary>
            K字节
            </summary>
        </member>
        <member name="F:Util.Files.FileUnit.M">
            <summary>
            M字节
            </summary>
        </member>
        <member name="F:Util.Files.FileUnit.G">
            <summary>
            G字节
            </summary>
        </member>
        <member name="T:Util.Files.FileUnitExtensions">
            <summary>
            文件容量单位枚举扩展
            </summary>
        </member>
        <member name="M:Util.Files.FileUnitExtensions.Description(System.Nullable{Util.Files.FileUnit})">
            <summary>
            获取描述
            </summary>
        </member>
        <member name="M:Util.Files.FileUnitExtensions.Value(System.Nullable{Util.Files.FileUnit})">
            <summary>
            获取值
            </summary>
        </member>
        <member name="T:Util.Files.IFileManager">
            <summary>
            文件管理器
            </summary>
        </member>
        <member name="P:Util.Files.IFileManager.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="M:Util.Files.IFileManager.Append(System.String)">
            <summary>
            添加内容到文件末尾
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Util.Files.IFileManager.Remove(System.String)">
            <summary>
            移除内容
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Util.Files.IFileManager.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除内容
            </summary>
            <param name="list">内容列表</param>
        </member>
        <member name="M:Util.Files.IFileManager.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Util.Files.IFileManager.DeleteFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件列表
            </summary>
            <param name="paths">文件路径列表</param>
        </member>
        <member name="T:Util.Files.IFileUpload">
            <summary>
            文件上传操作
            </summary>
        </member>
        <member name="P:Util.Files.IFileUpload.UploadPath">
            <summary>
            上传路径
            </summary>
        </member>
        <member name="M:Util.Files.IFileUpload.GetFile(System.String,System.String)">
            <summary>
            获取上传文件
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.GetImage(System.String,System.String)">
            <summary>
            获取上传图片
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.GetFiles(System.String,System.String)">
            <summary>
            获取上传文件集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.GetImages(System.String,System.String)">
            <summary>
            获取上传图片集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.UploadFile(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.UploadImage(System.String,System.String)">
            <summary>
            上传图片
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.UploadFiles(System.String,System.String)">
            <summary>
            上传文件集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.UploadImages(System.String,System.String)">
            <summary>
            上传图片集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="T:Util.Files.ImageInfo">
            <summary>
            图片信息
            </summary>
        </member>
        <member name="M:Util.Files.ImageInfo.#ctor(System.String,System.Byte[],System.Nullable{System.Int64},System.Int32,System.Int32,System.String)">
            <summary>
            初始化图片信息
            </summary>
        </member>
        <member name="M:Util.Files.ImageInfo.Create(System.String,System.Nullable{System.Int64},System.Int32,System.Int32,System.String)">
            <summary>
            初始化图片信息
            </summary>
            <param name="filePath">文件相对路径</param>
            <param name="fileSize">文件大小</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Util.Files.ImageInfo.Create(System.String,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            初始化图片信息
            </summary>
            <param name="filePath">文件相对路径</param>
            <param name="fileBytes">文件字节流</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="P:Util.Files.ImageInfo.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="T:Util.Files.IUploadPath">
            <summary>
            上传路径
            </summary>
        </member>
        <member name="M:Util.Files.IUploadPath.GetPath(System.String,System.String,System.String)">
            <summary>
            获取上传路径
            </summary>
            <param name="fileName">文件名，包含扩展名</param>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="T:Util.Files.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="M:Util.Files.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化尺寸
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="P:Util.Files.Size.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Util.Files.Size.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="T:Util.Files.UserUploadPath">
            <summary>
            用户上传路径
            </summary>
        </member>
        <member name="M:Util.Files.UserUploadPath.#ctor">
            <summary>
            初始化用户上传路径
            </summary>
        </member>
        <member name="P:Util.Files.UserUploadPath.UserContext">
            <summary>
            用户上下文
            </summary>
        </member>
        <member name="M:Util.Files.UserUploadPath.GetPath(System.String,System.String,System.String)">
            <summary>
            获取上传路径,形式：/基目录/租户目录/文件分类目录/yyyy-MM-dd/用户Id/文件名-HHmmss.扩展名
            </summary>
            <param name="fileName">文件名，包含扩展名</param>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基目录</param>
        </member>
        <member name="M:Util.Files.UserUploadPath.GetDirectoryPath(System.String,System.String)">
            <summary>
            获取上传目录路径,目录形式：/基分类目录/租户目录/文件分类目录/yyyy-MM-dd/用户名/
            </summary>
        </member>
        <member name="M:Util.Files.UserUploadPath.GetBaseCatetory(System.String)">
            <summary>
            获取基目录
            </summary>
        </member>
        <member name="M:Util.Files.UserUploadPath.GetTenant">
            <summary>
            获取租户目录
            </summary>
        </member>
        <member name="M:Util.Files.UserUploadPath.GetCategory(System.String)">
            <summary>
            获取文件分类目录
            </summary>
        </member>
        <member name="M:Util.Files.UserUploadPath.GetUser">
            <summary>
            获取用户目录
            </summary>
        </member>
        <member name="T:Util.Files.FileUpload">
            <summary>
            文件上传操作
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.#ctor(Util.Files.IUploadPath)">
            <summary>
            初始化文件上传操作
            </summary>
            <param name="uploadPath">上传路径</param>
        </member>
        <member name="P:Util.Files.FileUpload.UploadPath">
            <summary>
            上传路径
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetFile(System.String,System.String)">
            <summary>
            获取上传文件
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.ToFileInfo(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            转换为文件信息
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetFilePath(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            获取文件路径
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetFileName(System.Web.HttpPostedFile)">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetImage(System.String,System.String)">
            <summary>
            获取上传图片
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.ToImageInfo(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            转换为图片信息
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetSize(System.IO.Stream)">
            <summary>
            获取图片尺寸
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetFiles(System.String,System.String)">
            <summary>
            获取上传文件集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.GetImages(System.String,System.String)">
            <summary>
            获取上传图片集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.UploadFile(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.UploadImage(System.String,System.String)">
            <summary>
            上传图片
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.UploadFiles(System.String,System.String)">
            <summary>
            上传文件集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.UploadImages(System.String,System.String)">
            <summary>
            上传图片集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="T:Util.Helpers.Common">
            <summary>
            常用公共操作
            </summary>
            <summary>
            常用公共操作
            </summary>
        </member>
        <member name="M:Util.Helpers.Common.GetType``1">
            <summary>
            获取类型
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:Util.Helpers.Common.Line">
            <summary>
            换行符
            </summary>
        </member>
        <member name="M:Util.Helpers.Common.GetPhysicalPath(System.String)">
            <summary>
            获取物理路径
            </summary>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="T:Util.Helpers.Const">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:Util.Helpers.Const.ChinesePinYin">
            <summary>
            汉字及拼音首字母
            </summary>
        </member>
        <member name="F:Util.Helpers.Const.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="F:Util.Helpers.Const.Letters">
            <summary>
            英文字母
            </summary>
        </member>
        <member name="F:Util.Helpers.Const.Numbers">
            <summary>
            数字
            </summary>
        </member>
        <member name="T:Util.Helpers.Convert">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:Util.Helpers.Convert.ToInt(System.Object)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToIntOrNull(System.Object)">
            <summary>
            转换为32位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToLong(System.Object)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToLongOrNull(System.Object)">
            <summary>
            转换为64位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToFloat(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToFloatOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位可空浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToDouble(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型,并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToDoubleOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位可空浮点型,并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToDecimal(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型,并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToDecimalOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位可空浮点型,并按指定小数位舍入，温馨提示：4舍6入5成双
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToBool(System.Object)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
        </member>
        <member name="M:Util.Helpers.Convert.ToDate(System.Object)">
            <summary>
            转换为日期
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToDateOrNull(System.Object)">
            <summary>
            转换为可空日期
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToGuid(System.Object)">
            <summary>
            转换为Guid
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToGuidOrNull(System.Object)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="input">以逗号分隔的Guid集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:Util.Helpers.Convert.ToList``1(System.String)">
            <summary>
            泛型集合转换
            </summary>
            <typeparam name="T">目标元素类型</typeparam>
            <param name="input">以逗号分隔的元素集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:Util.Helpers.Convert.To``1(System.Object)">
            <summary>
            通用泛型转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="input">输入值</param>
        </member>
        <member name="T:Util.Helpers.Enum">
            <summary>
            枚举操作
            </summary>
        </member>
        <member name="M:Util.Helpers.Enum.GetInstance``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名或值,范例:Enum1枚举有成员A=0,则传入"A"或"0"获取 Enum1.A</param>
        </member>
        <member name="M:Util.Helpers.Enum.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,则传入Enum1.A或0,获取成员名"A"</param>
        </member>
        <member name="M:Util.Helpers.Enum.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Util.Helpers.Enum.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
        </member>
        <member name="M:Util.Helpers.Enum.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Util.Helpers.Enum.GetDescription``1(System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Util.Helpers.Enum.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Util.Helpers.Enum.GetItems``1">
            <summary>
            获取描述项集合,文本设置为Description，值为Value,可通过<see cref="T:Util.OrderByAttribute"/>特性改变排序顺序，
            未设置OrderByAttribute特性的项使用Value作为SortId
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="M:Util.Helpers.Enum.ValidateEnum(System.Reflection.TypeInfo)">
            <summary>
            验证是否枚举类型
            </summary>
        </member>
        <member name="M:Util.Helpers.Enum.AddItem``1(System.Collections.Generic.ICollection{Util.Item},System.Reflection.FieldInfo)">
            <summary>
            添加描述项
            </summary>
        </member>
        <member name="M:Util.Helpers.Enum.GetSortId(System.Reflection.FieldInfo)">
            <summary>
            获取排序号
            </summary>
            <param name="field">枚举字段</param>
        </member>
        <member name="T:Util.Helpers.File">
            <summary>
            文件和流操作
            </summary>
            <summary>
            文件和流操作
            </summary>
        </member>
        <member name="M:Util.Helpers.File.ToString(System.IO.Stream)">
            <summary>
            流转换成字符串
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Helpers.File.ToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            流转换成字符串
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Helpers.File.ToStream(System.String)">
            <summary>
            字符串转换成流
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Helpers.File.ToStream(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成流
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Helpers.File.ToBytes(System.String)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据,默认字符编码utf-8</param>        
        </member>
        <member name="M:Util.Helpers.File.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Helpers.File.ToString(System.Byte[])">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data">数据,默认字符编码utf-8</param>        
        </member>
        <member name="M:Util.Helpers.File.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Helpers.File.ToInt(System.Byte[])">
            <summary>
            字节数组转换成整数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Helpers.File.ToBytes(System.IO.Stream)">
            <summary>
            流转换为字节流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Util.Helpers.File.GetAllFiles(System.String)">
            <summary>
            获取目录中全部文件列表，包括子目录
            </summary>
            <param name="directoryPath">目录绝对路径</param>
        </member>
        <member name="M:Util.Helpers.File.Read(System.String)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Util.Helpers.File.Read(System.String,System.Text.Encoding)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Helpers.File.ReadToBytes(System.String)">
            <summary>
            将文件读取到字节流中
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Util.Helpers.File.Write(System.String,System.String)">
            <summary>
            将字符串写入文件,文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">数据</param>
        </member>
        <member name="M:Util.Helpers.File.Write(System.String,System.Byte[])">
            <summary>
            将字节流写入文件,文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="bytes">数据</param>
        </member>
        <member name="M:Util.Helpers.File.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件
            </summary>
            <param name="filePaths">文件集合的绝对路径</param>
        </member>
        <member name="M:Util.Helpers.File.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Util.Helpers.File.Save(System.Collections.Generic.IEnumerable{Util.Files.FileInfo})">
            <summary>
            保存文件
            </summary>
            <param name="files">文件信息集合</param>
        </member>
        <member name="M:Util.Helpers.File.Save(Util.Files.FileInfo)">
            <summary>
            保存文件
            </summary>
            <param name="file">文件信息</param>
        </member>
        <member name="M:Util.Helpers.File.ValidateSave(Util.Files.FileInfo)">
            <summary>
            验证保存文件
            </summary>
        </member>
        <member name="M:Util.Helpers.File.CreateDirectory(Util.Files.FileInfo)">
            <summary>
            创建目录
            </summary>
        </member>
        <member name="M:Util.Helpers.File.SaveFile(Util.Files.FileInfo)">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="T:Util.Helpers.Lambda">
            <summary>
            Lambda表达式操作
            </summary>
        </member>
        <member name="M:Util.Helpers.Lambda.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.Name,返回 Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
        </member>
        <member name="M:Util.Helpers.Lambda.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:Util.Helpers.Lambda.AddName(System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression)">
            <summary>
            添加名称
            </summary>
        </member>
        <member name="M:Util.Helpers.Lambda.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值,范例：t => t.Name == "A",返回 A
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetMethodCallExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
        </member>
        <member name="M:Util.Helpers.Lambda.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
        </member>
        <member name="M:Util.Helpers.Lambda.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:Util.Helpers.Lambda.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name,返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetCriteriaCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取谓词条件的个数
            </summary>
            <param name="expression">谓词表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Util.Helpers.Lambda.Constant(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            获取常量表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.CreateParameter``1">
            <summary>
            创建参数
            </summary>
        </member>
        <member name="M:Util.Helpers.Lambda.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.Starts``1(System.String,System.String)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.Ends``1(System.String,System.String)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.Lambda.ParsePredicate``1(System.String,System.Object,Util.Expressions.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="F:Util.Helpers.Lambda.ExpressionInfos">
            <summary>
            表达式信息列表
            </summary>
        </member>
        <member name="F:Util.Helpers.Lambda.Sync">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:Util.Helpers.Lambda.GetExpressionInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取表达式信息
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="expression">属性表达式</param>
        </member>
        <member name="M:Util.Helpers.Lambda.GetKey``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取键
            </summary>
        </member>
        <member name="T:Util.Helpers.Reflection">
            <summary>
            反射操作
            </summary>
            <summary>
            反射操作
            </summary>
        </member>
        <member name="M:Util.Helpers.Reflection.GetDescription``1">
            <summary>
            获取类型描述，使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Util.Helpers.Reflection.GetDescription(System.Type)">
            <summary>
            获取描述
            </summary>
        </member>
        <member name="M:Util.Helpers.Reflection.GetDescription``1(System.String)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:Util.Helpers.Reflection.GetDescription(System.Type,System.String)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:Util.Helpers.Reflection.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Helpers.Reflection.GetDisplayName``1">
            <summary>
            获取类型显示名称，使用DisplayNameAttribute设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Util.Helpers.Reflection.GetDescriptionOrDisplayName``1">
            <summary>
            获取类型描述或显示名称,使用DescriptionAttribute设置描述，使用DisplayNameAttribute设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Util.Helpers.Reflection.GetTypesByInterface``1(System.Reflection.Assembly)">
            <summary>
            获取实现了接口的所有具体类型
            </summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="assembly">在该程序集中查找</param>
        </member>
        <member name="M:Util.Helpers.Reflection.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="type">类型</param>
            <param name="parameters">传递给构造函数的参数</param>        
        </member>
        <member name="M:Util.Helpers.Reflection.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
        </member>
        <member name="M:Util.Helpers.Reflection.IsBool(System.Reflection.MemberInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Helpers.Reflection.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
        </member>
        <member name="M:Util.Helpers.Reflection.IsEnum(System.Reflection.MemberInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Helpers.Reflection.IsEnum(System.Reflection.PropertyInfo)">
            <summary>
            是否枚举类型
            </summary>
        </member>
        <member name="M:Util.Helpers.Reflection.IsDate(System.Reflection.MemberInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Helpers.Reflection.IsDate(System.Reflection.PropertyInfo)">
            <summary>
            是否日期类型
            </summary>
        </member>
        <member name="M:Util.Helpers.Reflection.IsInt(System.Reflection.MemberInfo)">
            <summary>
            是否整型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Helpers.Reflection.IsInt(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
        </member>
        <member name="M:Util.Helpers.Reflection.IsNumber(System.Reflection.MemberInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Helpers.Reflection.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            是否数值类型
            </summary>
        </member>
        <member name="M:Util.Helpers.Reflection.GetAssemblies(System.String)">
            <summary>
            从目录中获取所有程序集
            </summary>
            <param name="directoryPath">目录绝对路径</param>
        </member>
        <member name="T:Util.Helpers.Regex">
            <summary>
            正则表达式操作
            </summary>
        </member>
        <member name="M:Util.Helpers.Regex.IsMatch(System.String,System.String)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:Util.Helpers.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件,比如是否忽略大小写</param>
        </member>
        <member name="M:Util.Helpers.Regex.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            获取匹配的值
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="replaceText">替换文本</param>
            <param name="count">替换次数，默认为0，表示全部替换</param>
        </member>
        <member name="M:Util.Helpers.Regex.GetResult(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取匹配的结果
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="resultPattern">结果模式字符串,范例："$1"用来获取第一个()内的值</param>
            <param name="options">筛选选项,如是否忽略大小写</param>
        </member>
        <member name="T:Util.Helpers.String">
            <summary>
            字符串操作 - 字符串生成器
            </summary>
            <summary>
            字符串操作 - 工具库
            </summary>
        </member>
        <member name="M:Util.Helpers.String.#ctor">
            <summary>
            初始化字符串操作
            </summary>
        </member>
        <member name="P:Util.Helpers.String.Builder">
            <summary>
            字符串生成器
            </summary>
        </member>
        <member name="M:Util.Helpers.String.Append``1(``0)">
            <summary>
            追加内容
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.String.Append(System.String,System.Object[])">
            <summary>
            追加内容
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Util.Helpers.String.AppendLine">
            <summary>
            追加内容并换行
            </summary>
        </member>
        <member name="M:Util.Helpers.String.AppendLine``1(``0)">
            <summary>
            追加内容并换行
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.String.AppendLine(System.String,System.Object[])">
            <summary>
            追加内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Util.Helpers.String.Replace(System.String)">
            <summary>
            替换内容
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Helpers.String.RemoveEnd(System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="end">末尾字符串</param>
        </member>
        <member name="M:Util.Helpers.String.Clear">
            <summary>
            清空字符串
            </summary>
        </member>
        <member name="P:Util.Helpers.String.Length">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="P:Util.Helpers.String.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="M:Util.Helpers.String.ToString">
            <summary>
            转换为字符串
            </summary>
        </member>
        <member name="M:Util.Helpers.String.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            将集合连接为带分隔符的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号 "'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
        </member>
        <member name="M:Util.Helpers.String.GetLastProperty(System.String)">
            <summary>
            获取最后一个属性
            </summary>
            <param name="propertyName">属性名，范例，A.B.C,返回"C"</param>
        </member>
        <member name="M:Util.Helpers.String.PinYin(System.String)">
            <summary>
            获取汉字的拼音简码，即首字母缩写,范例：中国,返回zg
            </summary>
            <param name="chineseText">汉字文本,范例： 中国</param>
        </member>
        <member name="M:Util.Helpers.String.ResolvePinYin(System.Char)">
            <summary>
            解析单个汉字的拼音简码
            </summary>
            <param name="text">单个汉字</param>
        </member>
        <member name="M:Util.Helpers.String.ResolvePinYinByCode(System.UInt16)">
            <summary>
            使用字符编码方式获取拼音简码
            </summary>
        </member>
        <member name="M:Util.Helpers.String.ResolvePinYinByFile(System.String)">
            <summary>
            从拼音简码文件获取
            </summary>
            <param name="text">单个汉字</param>
        </member>
        <member name="M:Util.Helpers.String.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">文本</param>
            <param name="length">返回长度</param>
            <param name="endCharCount">添加结束符号的个数，默认0，不添加</param>
            <param name="endChar">结束符号，默认为省略号</param>
        </member>
        <member name="M:Util.Helpers.String.GetEndString(System.Int32,System.String)">
            <summary>
            获取结束字符串
            </summary>
        </member>
        <member name="T:Util.Helpers.Thread">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="P:Util.Helpers.Thread.ThreadId">
            <summary>
            获取当前线程号
            </summary>
        </member>
        <member name="T:Util.Helpers.Time">
            <summary>
            时间操作
            </summary>
        </member>
        <member name="F:Util.Helpers.Time._dateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="M:Util.Helpers.Time.SetTime(System.Nullable{System.DateTime})">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:Util.Helpers.Time.SetTime(System.String)">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:Util.Helpers.Time.Reset">
            <summary>
            重置时间
            </summary>
        </member>
        <member name="M:Util.Helpers.Time.GetDateTime">
            <summary>
            获取当前日期时间
            </summary>
        </member>
        <member name="M:Util.Helpers.Time.GetDate">
            <summary>
            获取当前日期,不带时间
            </summary>
        </member>
        <member name="M:Util.Helpers.Time.GetUnixTimestamp">
            <summary>
            获取Unix时间戳
            </summary>
        </member>
        <member name="M:Util.Helpers.Time.GetUnixTimestamp(System.DateTime)">
            <summary>
            获取Unix时间戳
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:Util.Helpers.Time.GetTimeFromUnixTimestamp(System.Int64)">
            <summary>
            从Unix时间戳获取时间
            </summary>
            <param name="timestamp">Unix时间戳</param>
        </member>
        <member name="M:Util.Helpers.Time.Format(System.TimeSpan)">
            <summary>
            格式化时间间隔
            </summary>
            <param name="span">时间间隔</param>
        </member>
        <member name="T:Util.Helpers.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Util.Helpers.Context.#cctor">
            <summary>
            初始化上下文
            </summary>
        </member>
        <member name="F:Util.Helpers.Context._context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Util.Helpers.Context.IsWeb">
            <summary>
            是否Web系统
            </summary>
        </member>
        <member name="M:Util.Helpers.Context.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Util.Helpers.Context.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Helpers.Context.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Util.Helpers.Encrypt">
            <summary>
            加密操作
            </summary>
        </member>
        <member name="M:Util.Helpers.Encrypt.Md5By16(System.String)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="text">待加密字符串</param>
        </member>
        <member name="M:Util.Helpers.Encrypt.Md5By16(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="text">待加密字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Helpers.Encrypt.Md5(System.String,System.Text.Encoding,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Md5加密
            </summary>
        </member>
        <member name="M:Util.Helpers.Encrypt.Md5By32(System.String)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="text">待加密字符串</param>
        </member>
        <member name="M:Util.Helpers.Encrypt.Md5By32(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="text">待加密字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="F:Util.Helpers.Encrypt.DesKey">
            <summary>
            获取临时加密密钥
            </summary>
        </member>
        <member name="M:Util.Helpers.Encrypt.EncodeDes(System.Object)">
            <summary>
            Des加密
            </summary>
            <param name="value">原始值</param>
        </member>
        <member name="M:Util.Helpers.Encrypt.EncodeDes(System.Object,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="value">原始值</param>
            <param name="key">密钥,必须24位</param>
        </member>
        <member name="M:Util.Helpers.Encrypt.ValidateDes(System.String,System.String)">
            <summary>
            验证参数
            </summary>
        </member>
        <member name="M:Util.Helpers.Encrypt.CreateProvider(System.String)">
            <summary>
            创建加密服务提供程序
            </summary>
        </member>
        <member name="M:Util.Helpers.Encrypt.DecodeDes(System.Object)">
            <summary>
            DES解密
            </summary>
            <param name="value">内容</param>
        </member>
        <member name="M:Util.Helpers.Encrypt.DecodeDes(System.Object,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="value">内容</param>
            <param name="key">密钥,必须24位</param>
        </member>
        <member name="T:Util.Helpers.Net">
            <summary>
            网络操作
            </summary>
        </member>
        <member name="P:Util.Helpers.Net.Ip">
            <summary>
            获取Ip
            </summary>
        </member>
        <member name="M:Util.Helpers.Net.GetWebClientIp">
            <summary>
            获取Web客户端的Ip
            </summary>
        </member>
        <member name="M:Util.Helpers.Net.GetWebRemoteIp">
            <summary>
            获取Web远程Ip
            </summary>
        </member>
        <member name="M:Util.Helpers.Net.GetLanIp">
            <summary>
            获取局域网IP
            </summary>
        </member>
        <member name="P:Util.Helpers.Net.Host">
            <summary>
            获取主机名
            </summary>
        </member>
        <member name="M:Util.Helpers.Net.GetWebClientHostName">
            <summary>
            获取Web客户端主机名
            </summary>
        </member>
        <member name="P:Util.Helpers.Net.Browser">
            <summary>
            获取浏览器信息
            </summary>
        </member>
        <member name="T:Util.Helpers.Web">
            <summary>
            Web操作
            </summary>
        </member>
        <member name="P:Util.Helpers.Web.Url">
            <summary>
            获取客户端请求的Url
            </summary>
        </member>
        <member name="M:Util.Helpers.Web.ResolveUrl(System.String)">
            <summary>
            解析相对Url
            </summary>
            <param name="relativeUrl">相对Url</param>
        </member>
        <member name="M:Util.Helpers.Web.GetFileControls">
            <summary>
            获取有效客户端文件控件集合,文件控件必须上传了内容，为空将被忽略,
            注意:Form标记必须加入属性 enctype="multipart/form-data",服务器端才能获取客户端file控件.
            </summary>
        </member>
        <member name="M:Util.Helpers.Web.GetFileControl">
            <summary>
            获取第一个有效客户端文件控件,文件控件必须上传了内容，为空将被忽略,
            注意:Form标记必须加入属性 enctype="multipart/form-data",服务器端才能获取客户端file控件.
            </summary>
        </member>
        <member name="M:Util.Helpers.Web.SetCookie(System.String,System.String,System.Double,System.String)">
            <summary>
            创建Cookie
            </summary>
            <param name="cookieName">Cookie名称</param>
            <param name="value">值</param>
            <param name="expiresDate">有效时间,单位：天</param>
            <param name="domain">所属域</param>
        </member>
        <member name="M:Util.Helpers.Web.SetCookie(System.String,System.String,System.String,System.Double,System.String)">
            <summary>
            创建Cookie
            </summary>
            <param name="cookieName">Cookie名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expiresDate">有效时间,单位：天</param>
            <param name="domain">所属域</param>
        </member>
        <member name="M:Util.Helpers.Web.GetCookie(System.String)">
            <summary>
            获取Cookie的实例
            </summary>
            <param name="cookieName">Cookie名称</param>
        </member>
        <member name="M:Util.Helpers.Web.GetCookieValue(System.String)">
            <summary>
            读取Cookie
            </summary>
            <param name="cookieName">Cookie名称</param>
        </member>
        <member name="M:Util.Helpers.Web.GetCookieValue(System.String,System.String)">
            <summary>
            读取Cookie
            </summary>
            <param name="cookieName">Cookie名称</param>
            <param name="key">Cookie的键名</param>
        </member>
        <member name="M:Util.Helpers.Web.GetHttpHeader(System.String)">
            <summary>
            获取Http头
            </summary>
            <param name="name">Http头名称</param>
        </member>
        <member name="T:Util.Iocs.IDependency">
            <summary>
            依赖服务，用于Ioc自动装配
            </summary>
        </member>
        <member name="T:Util.Item">
            <summary>
            列表项
            </summary>
        </member>
        <member name="M:Util.Item.#ctor">
            <summary>
            初始化列表项
            </summary>
        </member>
        <member name="M:Util.Item.#ctor(System.String,System.String)">
            <summary>
            初始化列表项
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Item.#ctor(System.String,System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
            <param name="sortId">排序号</param>
        </member>
        <member name="P:Util.Item.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Util.Item.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Util.Item.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="M:Util.Item.CompareTo(Util.Item)">
            <summary>
            比较
            </summary>
            <param name="other">其它列表项</param>
        </member>
        <member name="T:Util.Logs.Formats.BusinessFormatter">
            <summary>
            业务格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.BusinessFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化业务格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.BusinessFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.CaptionFormatter">
            <summary>
            标题格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.CaptionFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化标题格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.CaptionFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.ClassFormatter">
            <summary>
            类格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ClassFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化类格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.ClassFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.ContentFormatter">
            <summary>
            内容格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ContentFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化内容格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.ContentFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.ErrorFormatter">
            <summary>
            错误格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ErrorFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化错误格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.ErrorFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ErrorFormatter.AddErrorCode">
            <summary>
            添加错误码
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ErrorFormatter.AddError">
            <summary>
            添加错误消息
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.FormatterBase">
            <summary>
            日志消息格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.FormatterBase.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化日志消息格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="P:Util.Logs.Formats.FormatterBase.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:Util.Logs.Formats.FormatterBase.Result">
            <summary>
            输出结果
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.FormatterBase.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.FormatterBase.Add(System.String,System.String)">
            <summary>
            添加消息
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.IpFormatter">
            <summary>
            Ip格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.IpFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化Ip格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.IpFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.LogMessageFormatter">
            <summary>
            日志消息格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.LogMessageFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化日志消息格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="P:Util.Logs.Formats.LogMessageFormatter.Line">
            <summary>
            行号
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.LogMessageFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.LogMessageFormatter.Add(Util.Logs.Formats.FormatterBase)">
            <summary>
            添加消息
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.LogMessageFormatter.Finish">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.ParamsFormatter">
            <summary>
            请求参数格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ParamsFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化类格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.ParamsFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.SqlFormatter">
            <summary>
            Sql格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.SqlFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化Sql格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.SqlFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.SqlParamsFormatter">
            <summary>
            Sql参数格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.SqlParamsFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化Sql参数格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.SqlParamsFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.StackTraceFormatter">
            <summary>
            堆栈跟踪格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.StackTraceFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化堆栈跟踪格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.StackTraceFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.TitleFormatter">
            <summary>
            标题格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化标题格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.AddLevel">
            <summary>
            添加日志级别
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.AddTraceId">
            <summary>
            添加跟踪号
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.AddTime">
            <summary>
            添加操作时间
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.AddTotalSeconds">
            <summary>
            添加已执行时间
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.UrlFormatter">
            <summary>
            Url格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.UrlFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化Url格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.UrlFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.UrlFormatter.AddUrl">
            <summary>
            添加Url
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.UserFormatter">
            <summary>
            用户格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.UserFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化用户格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.UserFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.ILog">
            <summary>
            日志操作
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.BusinessId(System.String)">
            <summary>
            设置业务编号
            </summary>
            <param name="businessId">业务编号</param>
        </member>
        <member name="M:Util.Logs.ILog.Category(System.String)">
            <summary>
            设置分类
            </summary>
            <param name="category">分类</param>
        </member>
        <member name="M:Util.Logs.ILog.Class(System.String)">
            <summary>
            设置类名
            </summary>
            <param name="class">类名</param>
        </member>
        <member name="M:Util.Logs.ILog.Method(System.String)">
            <summary>
            设置方法名
            </summary>
            <param name="method">方法名</param>
        </member>
        <member name="M:Util.Logs.ILog.Params(System.String,System.Object[])">
            <summary>
            设置参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.ParamsLine(System.String,System.Object[])">
            <summary>
            设置参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.Caption(System.String,System.Object[])">
            <summary>
            设置标题
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.Content(System.String,System.Object[])">
            <summary>
            设置内容
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.ContentLine(System.String,System.Object[])">
            <summary>
            设置内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.Sql(System.String,System.Object[])">
            <summary>
            设置Sql语句
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.SqlLine(System.String,System.Object[])">
            <summary>
            设置Sql语句并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.SqlParams(System.String,System.Object[])">
            <summary>
            设置Sql参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.SqlParamsLine(System.String,System.Object[])">
            <summary>
            设置Sql参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.ErrorCode(System.String)">
            <summary>
            设置错误码
            </summary>
            <param name="value">错误码</param>
        </member>
        <member name="M:Util.Logs.ILog.Exception(System.Exception)">
            <summary>
            设置异常
            </summary>
            <param name="value">异常</param>
        </member>
        <member name="M:Util.Logs.ILog.ReplaceSql(System.String)">
            <summary>
            替换Sql语句
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Logs.ILog.GetCaption">
            <summary>
            获取标题
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.GetContent">
            <summary>
            获取内容
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.GetSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.IsDebugEnabled">
            <summary>
            Debug级别是否启用
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Fatal(System.String,System.Object[])">
            <summary>
            致命错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.ILog.WriteLog(Util.Logs.LogLevel)">
            <summary>
            写日志
            </summary>
            <param name="level">日志级别</param>
        </member>
        <member name="T:Util.Logs.LogBase">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.#ctor">
            <summary>
            初始化日志
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._traceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._logName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._businessId">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._category">
            <summary>
            分类
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._class">
            <summary>
            类名
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._params">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._content">
            <summary>
            内容
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._sql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._sqlParams">
            <summary>
            Sql参数
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._errorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._errorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="F:Util.Logs.LogBase._stackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.BusinessId(System.String)">
            <summary>
            设置业务编号
            </summary>
            <param name="businessId">业务编号</param>
        </member>
        <member name="M:Util.Logs.LogBase.Category(System.String)">
            <summary>
            设置分类
            </summary>
            <param name="category">分类</param>
        </member>
        <member name="M:Util.Logs.LogBase.Class(System.String)">
            <summary>
            设置类名
            </summary>
            <param name="class">类名</param>
        </member>
        <member name="M:Util.Logs.LogBase.Method(System.String)">
            <summary>
            设置方法名
            </summary>
            <param name="method">方法名</param>
        </member>
        <member name="M:Util.Logs.LogBase.Params(System.String,System.Object[])">
            <summary>
            设置参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.Append(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            追加内容
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.ParamsLine(System.String,System.Object[])">
            <summary>
            设置参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            追加内容并换行
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Caption(System.String,System.Object[])">
            <summary>
            设置标题
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.Content(System.String,System.Object[])">
            <summary>
            设置内容
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.ContentLine(System.String,System.Object[])">
            <summary>
            设置内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.Sql(System.String,System.Object[])">
            <summary>
            设置Sql语句
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.SqlLine(System.String,System.Object[])">
            <summary>
            设置Sql语句并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.SqlParams(System.String,System.Object[])">
            <summary>
            设置Sql参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.SqlParamsLine(System.String,System.Object[])">
            <summary>
            设置Sql参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.ErrorCode(System.String)">
            <summary>
            设置错误码
            </summary>
            <param name="value">错误码</param>
        </member>
        <member name="M:Util.Logs.LogBase.Exception(System.Exception)">
            <summary>
            设置异常
            </summary>
            <param name="value">异常</param>
        </member>
        <member name="M:Util.Logs.LogBase.ReplaceSql(System.String)">
            <summary>
            替换Sql语句
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Logs.LogBase.GetBusinessId">
            <summary>
            获取业务编号
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.GetCategory">
            <summary>
            获取分类
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.GetClass">
            <summary>
            获取类名
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.GetMethod">
            <summary>
            获取方法名
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.GetParams">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.GetCaption">
            <summary>
            获取标题
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.GetContent">
            <summary>
            获取内容
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.GetSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.GetSqlParams">
            <summary>
            获取Sql参数
            </summary>
        </member>
        <member name="P:Util.Logs.LogBase.IsDebugEnabled">
            <summary>
            Debug级别是否启用
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.WriteLog(Util.Logs.LogLevel)">
            <summary>
            写日志
            </summary>
            <param name="level">日志级别</param>
        </member>
        <member name="M:Util.Logs.LogBase.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.DebugLog">
            <summary>
            写调试日志
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Execute(System.Action,Util.Logs.LogLevel,System.String,System.Object[])">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.InfoLog">
            <summary>
            写信息日志
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.WarnLog">
            <summary>
            写警告日志
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.ErrorLog">
            <summary>
            写错误日志
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Util.Logs.LogBase.Fatal(System.String,System.Object[])">
            <summary>
            致命错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.LogBase.FatalLog">
            <summary>
            写致命错误日志
            </summary>
        </member>
        <member name="T:Util.Logs.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:Util.Logs.LogContext.#ctor(System.Diagnostics.Stopwatch,System.String)">
            <summary>
            初始化日志上下文
            </summary>
            <param name="stopwatch">计时器</param>
            <param name="traceId">跟踪号</param>
        </member>
        <member name="P:Util.Logs.LogContext.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:Util.Logs.LogContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="T:Util.Logs.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Information">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="T:Util.Logs.LogMessage">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Duration">
            <summary>
            持续时间
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Url">
            <summary>
            网址
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.BusinessId">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Application">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Tenant">
            <summary>
            租户
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Category">
            <summary>
            分类
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Class">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.ThreadId">
            <summary>
            线程号
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.UserId">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Operator">
            <summary>
            操作人姓名
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Role">
            <summary>
            操作人角色
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Sql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.SqlParams">
            <summary>
            Sql参数
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Error">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.StackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="M:Util.Logs.LogMessage.ToString">
            <summary>
            获取格式化字符串
            </summary>
        </member>
        <member name="T:Util.Logs.NullLog">
            <summary>
            空日志
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.#ctor">
            <summary>
            初始化日志
            </summary>
        </member>
        <member name="F:Util.Logs.NullLog.Instance">
            <summary>
            空日志实例
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.BusinessId(System.String)">
            <summary>
            设置业务编号
            </summary>
            <param name="businessId">业务编号</param>
        </member>
        <member name="M:Util.Logs.NullLog.Category(System.String)">
            <summary>
            设置分类
            </summary>
            <param name="category">分类</param>
        </member>
        <member name="M:Util.Logs.NullLog.Class(System.String)">
            <summary>
            设置类名
            </summary>
            <param name="class">类名</param>
        </member>
        <member name="M:Util.Logs.NullLog.Method(System.String)">
            <summary>
            设置方法名
            </summary>
            <param name="method">方法名</param>
        </member>
        <member name="M:Util.Logs.NullLog.Params(System.String,System.Object[])">
            <summary>
            设置参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.ParamsLine(System.String,System.Object[])">
            <summary>
            设置参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.Caption(System.String,System.Object[])">
            <summary>
            设置标题
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.Content(System.String,System.Object[])">
            <summary>
            设置内容
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.ContentLine(System.String,System.Object[])">
            <summary>
            设置内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.Sql(System.String,System.Object[])">
            <summary>
            设置Sql语句
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.SqlLine(System.String,System.Object[])">
            <summary>
            设置Sql语句并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.SqlParams(System.String,System.Object[])">
            <summary>
            设置Sql参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.SqlParamsLine(System.String,System.Object[])">
            <summary>
            设置Sql参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.ErrorCode(System.String)">
            <summary>
            设置错误码
            </summary>
            <param name="value">错误码</param>
        </member>
        <member name="M:Util.Logs.NullLog.Exception(System.Exception)">
            <summary>
            设置异常
            </summary>
            <param name="value">异常</param>
        </member>
        <member name="M:Util.Logs.NullLog.ReplaceSql(System.String)">
            <summary>
            替换Sql语句
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Logs.NullLog.GetCaption">
            <summary>
            获取标题
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.GetContent">
            <summary>
            获取内容
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.GetSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="P:Util.Logs.NullLog.IsDebugEnabled">
            <summary>
            Debug级别是否启用
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Util.Logs.NullLog.Fatal(System.String,System.Object[])">
            <summary>
            致命错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Util.Logs.NullLog.WriteLog(Util.Logs.LogLevel)">
            <summary>
            写日志
            </summary>
            <param name="level">日志级别</param>
        </member>
        <member name="T:Util.OrderByAttribute">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Util.OrderByAttribute.#ctor(System.Int32)">
            <summary>
            初始化排序
            </summary>
            <param name="sortId">排序号</param>
        </member>
        <member name="P:Util.OrderByAttribute.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:Util.Security.Identity">
            <summary>
            身份标识
            </summary>
        </member>
        <member name="M:Util.Security.Identity.#ctor">
            <summary>
            初始化身份标识
            </summary>
        </member>
        <member name="M:Util.Security.Identity.#ctor(System.Boolean,System.String,Util.Domains.Contexts.IUserContext)">
            <summary>
            初始化身份标识
            </summary>
            <param name="isAuthenticated">是否认证</param>
            <param name="userId">用户编号</param>
            <param name="userContext">用户上下文</param>
        </member>
        <member name="P:Util.Security.Identity.AuthenticationType">
            <summary>
            认证类型
            </summary>
        </member>
        <member name="P:Util.Security.Identity.IsAuthenticated">
            <summary>
            是否认证(登录)
            </summary>
        </member>
        <member name="P:Util.Security.Identity.Name">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="F:Util.Security.Identity._userContext">
            <summary>
            用户上下文
            </summary>
        </member>
        <member name="M:Util.Security.Identity.GetUserContext">
            <summary>
            获取用户上下文
            </summary>
        </member>
        <member name="M:Util.Security.Identity.Unauthenticated">
            <summary>
            未认证的身份标识
            </summary>
        </member>
        <member name="T:Util.Security.Principal">
            <summary>
            安全主体
            </summary>
        </member>
        <member name="M:Util.Security.Principal.#ctor">
            <summary>
            初始化安全主体
            </summary>
        </member>
        <member name="M:Util.Security.Principal.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            初始化安全主体
            </summary>
        </member>
        <member name="P:Util.Security.Principal.Identity">
            <summary>
            身份标识
            </summary>
        </member>
        <member name="M:Util.Security.Principal.GetIdentity">
            <summary>
            获取身份标识
            </summary>
        </member>
        <member name="M:Util.Security.Principal.IsInRole(System.String)">
            <summary>
            验证用户是否在指定角色中
            </summary>
            <param name="role">角色</param>
        </member>
        <member name="M:Util.Security.Principal.Unauthenticated">
            <summary>
            未认证安全主体
            </summary>
        </member>
        <member name="T:Util.Security.UnauthenticatedIdentity">
            <summary>
            未认证的身份标识
            </summary>
        </member>
        <member name="M:Util.Security.UnauthenticatedIdentity.#ctor">
            <summary>
            初始化未认证的身份标识
            </summary>
        </member>
        <member name="F:Util.Security.UnauthenticatedIdentity.Instance">
            <summary>
            未认证的身份标识实例
            </summary>
        </member>
        <member name="T:Util.Security.UnauthenticatedPrincipal">
            <summary>
            未认证安全主体
            </summary>
        </member>
        <member name="M:Util.Security.UnauthenticatedPrincipal.#ctor">
            <summary>
            初始化未认证安全主体
            </summary>
        </member>
        <member name="F:Util.Security.UnauthenticatedPrincipal.Instance">
            <summary>
            未认证安全主体实例
            </summary>
        </member>
        <member name="T:Util.Validations.IValidation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:Util.Validations.IValidation.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">验证目标</param>
        </member>
        <member name="T:Util.Validations.IValidationHandler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="M:Util.Validations.IValidationHandler.Handle(Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Util.Validations.IValidationRule">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:Util.Validations.IValidationRule.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Util.Validations.Validation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:Util.Validations.Validation.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">验证目标</param>
        </member>
        <member name="T:Util.Validations.ValidationFactory">
            <summary>
            验证工厂
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationFactory.Create">
            <summary>
            创建验证操作
            </summary>
        </member>
        <member name="T:Util.Validations.ValidationHandler">
            <summary>
            默认验证处理器，直接抛出异常
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationHandler.Handle(Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Util.Validations.ValidationResultCollection">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.#ctor">
            <summary>
            初始化验证结果集合
            </summary>
        </member>
        <member name="F:Util.Validations.ValidationResultCollection._results">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:Util.Validations.ValidationResultCollection.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:Util.Validations.ValidationResultCollection.Count">
            <summary>
            验证结果个数
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.Add(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            添加验证结果
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.AddResults(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            添加验证结果集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.System#Collections#Generic#IEnumerable{System#ComponentModel#DataAnnotations#ValidationResult}#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="T:Util.R">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Util.R.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Util.R.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Util.R.ConcurrencyExceptionMessage">
            <summary>
              查找类似 当前操作的数据已被其它人修改，请刷新后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.DataBaseRefrenceError">
            <summary>
              查找类似 对不起，不能删除该记录，因为该记录已经关联了相关数据，请删除相关数据后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.DeleteSuccess">
            <summary>
              查找类似 删除成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.InvalidFile">
            <summary>
              查找类似 名为 {0} 的文件无效 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.InvalidMobilePhone">
            <summary>
              查找类似 手机号 {0} 无效 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.OnlyOnePredicate">
            <summary>
              查找类似 仅允许添加一个条件,条件：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.RememberSave">
            <summary>
              查找类似 进行该操作后，记得保存 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.SaveSuccess">
            <summary>
              查找类似 保存成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.SortIdIsNull">
            <summary>
              查找类似 排序号不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.SystemError">
            <summary>
              查找类似 系统忙，请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MobilePhoneAttribute">
            <summary>
            手机号验证
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MobilePhoneAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MobilePhoneAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
    </members>
</doc>
